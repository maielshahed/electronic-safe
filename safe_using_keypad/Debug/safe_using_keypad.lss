
safe_using_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001150  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  00001150  000011e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000ea  008000ea  0000126e  2**0
                  ALLOC
  3 .stab         0000135c  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000045c  00000000  00000000  000025cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00002a28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b5  00000000  00000000  00002b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005bb  00000000  00000000  00003cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a4d  00000000  00000000  000042b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00004d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fc  00000000  00000000  00004fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dd0  00000000  00000000  000053d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000061a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3f       	cpi	r26, 0xF2	; 242
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 11 05 	call	0xa22	; 0xa22 <main>
      8a:	0c 94 a6 08 	jmp	0x114c	; 0x114c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetpindir>:
      92:	84 34       	cpi	r24, 0x44	; 68
      94:	09 f4       	brne	.+2      	; 0x98 <DIO_vsetpindir+0x6>
      96:	54 c0       	rjmp	.+168    	; 0x140 <DIO_vsetpindir+0xae>
      98:	85 34       	cpi	r24, 0x45	; 69
      9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vsetpindir+0x1c>
      9c:	82 34       	cpi	r24, 0x42	; 66
      9e:	99 f1       	breq	.+102    	; 0x106 <DIO_vsetpindir+0x74>
      a0:	83 34       	cpi	r24, 0x43	; 67
      a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vsetpindir+0x14>
      a4:	6a c0       	rjmp	.+212    	; 0x17a <DIO_vsetpindir+0xe8>
      a6:	81 34       	cpi	r24, 0x41	; 65
      a8:	09 f0       	breq	.+2      	; 0xac <DIO_vsetpindir+0x1a>
      aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_vsetpindir+0x120>
      ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_vsetpindir+0x3a>
      ae:	82 36       	cpi	r24, 0x62	; 98
      b0:	51 f1       	breq	.+84     	; 0x106 <DIO_vsetpindir+0x74>
      b2:	83 36       	cpi	r24, 0x63	; 99
      b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vsetpindir+0x2c>
      b6:	81 36       	cpi	r24, 0x61	; 97
      b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vsetpindir+0x2a>
      ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_vsetpindir+0x120>
      bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_vsetpindir+0x3a>
      be:	83 36       	cpi	r24, 0x63	; 99
      c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vsetpindir+0x32>
      c2:	5b c0       	rjmp	.+182    	; 0x17a <DIO_vsetpindir+0xe8>
      c4:	84 36       	cpi	r24, 0x64	; 100
      c6:	09 f0       	breq	.+2      	; 0xca <DIO_vsetpindir+0x38>
      c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_vsetpindir+0x120>
      ca:	3a c0       	rjmp	.+116    	; 0x140 <DIO_vsetpindir+0xae>
      cc:	41 30       	cpi	r20, 0x01	; 1
      ce:	69 f4       	brne	.+26     	; 0xea <DIO_vsetpindir+0x58>
      d0:	2a b3       	in	r18, 0x1a	; 26
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	ac 01       	movw	r20, r24
      d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vsetpindir+0x4c>
      da:	44 0f       	add	r20, r20
      dc:	55 1f       	adc	r21, r21
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vsetpindir+0x48>
      e2:	ba 01       	movw	r22, r20
      e4:	62 2b       	or	r22, r18
      e6:	6a bb       	out	0x1a, r22	; 26
      e8:	08 95       	ret
      ea:	2a b3       	in	r18, 0x1a	; 26
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	ac 01       	movw	r20, r24
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vsetpindir+0x66>
      f4:	44 0f       	add	r20, r20
      f6:	55 1f       	adc	r21, r21
      f8:	6a 95       	dec	r22
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vsetpindir+0x62>
      fc:	ba 01       	movw	r22, r20
      fe:	60 95       	com	r22
     100:	62 23       	and	r22, r18
     102:	6a bb       	out	0x1a, r22	; 26
     104:	08 95       	ret
     106:	41 30       	cpi	r20, 0x01	; 1
     108:	69 f4       	brne	.+26     	; 0x124 <DIO_vsetpindir+0x92>
     10a:	27 b3       	in	r18, 0x17	; 23
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	ac 01       	movw	r20, r24
     112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vsetpindir+0x86>
     114:	44 0f       	add	r20, r20
     116:	55 1f       	adc	r21, r21
     118:	6a 95       	dec	r22
     11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vsetpindir+0x82>
     11c:	ba 01       	movw	r22, r20
     11e:	62 2b       	or	r22, r18
     120:	67 bb       	out	0x17, r22	; 23
     122:	08 95       	ret
     124:	27 b3       	in	r18, 0x17	; 23
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	ac 01       	movw	r20, r24
     12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vsetpindir+0xa0>
     12e:	44 0f       	add	r20, r20
     130:	55 1f       	adc	r21, r21
     132:	6a 95       	dec	r22
     134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vsetpindir+0x9c>
     136:	ba 01       	movw	r22, r20
     138:	60 95       	com	r22
     13a:	62 23       	and	r22, r18
     13c:	67 bb       	out	0x17, r22	; 23
     13e:	08 95       	ret
     140:	41 30       	cpi	r20, 0x01	; 1
     142:	69 f4       	brne	.+26     	; 0x15e <DIO_vsetpindir+0xcc>
     144:	21 b3       	in	r18, 0x11	; 17
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	ac 01       	movw	r20, r24
     14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vsetpindir+0xc0>
     14e:	44 0f       	add	r20, r20
     150:	55 1f       	adc	r21, r21
     152:	6a 95       	dec	r22
     154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vsetpindir+0xbc>
     156:	ba 01       	movw	r22, r20
     158:	62 2b       	or	r22, r18
     15a:	61 bb       	out	0x11, r22	; 17
     15c:	08 95       	ret
     15e:	21 b3       	in	r18, 0x11	; 17
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	ac 01       	movw	r20, r24
     166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vsetpindir+0xda>
     168:	44 0f       	add	r20, r20
     16a:	55 1f       	adc	r21, r21
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vsetpindir+0xd6>
     170:	ba 01       	movw	r22, r20
     172:	60 95       	com	r22
     174:	62 23       	and	r22, r18
     176:	61 bb       	out	0x11, r22	; 17
     178:	08 95       	ret
     17a:	41 30       	cpi	r20, 0x01	; 1
     17c:	69 f4       	brne	.+26     	; 0x198 <DIO_vsetpindir+0x106>
     17e:	24 b3       	in	r18, 0x14	; 20
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	ac 01       	movw	r20, r24
     186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vsetpindir+0xfa>
     188:	44 0f       	add	r20, r20
     18a:	55 1f       	adc	r21, r21
     18c:	6a 95       	dec	r22
     18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vsetpindir+0xf6>
     190:	ba 01       	movw	r22, r20
     192:	62 2b       	or	r22, r18
     194:	64 bb       	out	0x14, r22	; 20
     196:	08 95       	ret
     198:	24 b3       	in	r18, 0x14	; 20
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	ac 01       	movw	r20, r24
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vsetpindir+0x114>
     1a2:	44 0f       	add	r20, r20
     1a4:	55 1f       	adc	r21, r21
     1a6:	6a 95       	dec	r22
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vsetpindir+0x110>
     1aa:	ba 01       	movw	r22, r20
     1ac:	60 95       	com	r22
     1ae:	62 23       	and	r22, r18
     1b0:	64 bb       	out	0x14, r22	; 20
     1b2:	08 95       	ret

000001b4 <DIO_vwrite>:
     1b4:	84 34       	cpi	r24, 0x44	; 68
     1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_vwrite+0x6>
     1b8:	54 c0       	rjmp	.+168    	; 0x262 <DIO_vwrite+0xae>
     1ba:	85 34       	cpi	r24, 0x45	; 69
     1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_vwrite+0x1c>
     1be:	82 34       	cpi	r24, 0x42	; 66
     1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_vwrite+0x74>
     1c2:	83 34       	cpi	r24, 0x43	; 67
     1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_vwrite+0x14>
     1c6:	6a c0       	rjmp	.+212    	; 0x29c <DIO_vwrite+0xe8>
     1c8:	81 34       	cpi	r24, 0x41	; 65
     1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_vwrite+0x1a>
     1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_vwrite+0x120>
     1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_vwrite+0x3a>
     1d0:	82 36       	cpi	r24, 0x62	; 98
     1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_vwrite+0x74>
     1d4:	83 36       	cpi	r24, 0x63	; 99
     1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_vwrite+0x2c>
     1d8:	81 36       	cpi	r24, 0x61	; 97
     1da:	09 f0       	breq	.+2      	; 0x1de <DIO_vwrite+0x2a>
     1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_vwrite+0x120>
     1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_vwrite+0x3a>
     1e0:	83 36       	cpi	r24, 0x63	; 99
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_vwrite+0x32>
     1e4:	5b c0       	rjmp	.+182    	; 0x29c <DIO_vwrite+0xe8>
     1e6:	84 36       	cpi	r24, 0x64	; 100
     1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_vwrite+0x38>
     1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_vwrite+0x120>
     1ec:	3a c0       	rjmp	.+116    	; 0x262 <DIO_vwrite+0xae>
     1ee:	41 30       	cpi	r20, 0x01	; 1
     1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_vwrite+0x58>
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	ac 01       	movw	r20, r24
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_vwrite+0x4c>
     1fc:	44 0f       	add	r20, r20
     1fe:	55 1f       	adc	r21, r21
     200:	6a 95       	dec	r22
     202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_vwrite+0x48>
     204:	ba 01       	movw	r22, r20
     206:	62 2b       	or	r22, r18
     208:	6b bb       	out	0x1b, r22	; 27
     20a:	08 95       	ret
     20c:	2b b3       	in	r18, 0x1b	; 27
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	ac 01       	movw	r20, r24
     214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vwrite+0x66>
     216:	44 0f       	add	r20, r20
     218:	55 1f       	adc	r21, r21
     21a:	6a 95       	dec	r22
     21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vwrite+0x62>
     21e:	ba 01       	movw	r22, r20
     220:	60 95       	com	r22
     222:	62 23       	and	r22, r18
     224:	6b bb       	out	0x1b, r22	; 27
     226:	08 95       	ret
     228:	41 30       	cpi	r20, 0x01	; 1
     22a:	69 f4       	brne	.+26     	; 0x246 <DIO_vwrite+0x92>
     22c:	28 b3       	in	r18, 0x18	; 24
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	ac 01       	movw	r20, r24
     234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vwrite+0x86>
     236:	44 0f       	add	r20, r20
     238:	55 1f       	adc	r21, r21
     23a:	6a 95       	dec	r22
     23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vwrite+0x82>
     23e:	ba 01       	movw	r22, r20
     240:	62 2b       	or	r22, r18
     242:	68 bb       	out	0x18, r22	; 24
     244:	08 95       	ret
     246:	28 b3       	in	r18, 0x18	; 24
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	ac 01       	movw	r20, r24
     24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vwrite+0xa0>
     250:	44 0f       	add	r20, r20
     252:	55 1f       	adc	r21, r21
     254:	6a 95       	dec	r22
     256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vwrite+0x9c>
     258:	ba 01       	movw	r22, r20
     25a:	60 95       	com	r22
     25c:	62 23       	and	r22, r18
     25e:	68 bb       	out	0x18, r22	; 24
     260:	08 95       	ret
     262:	41 30       	cpi	r20, 0x01	; 1
     264:	69 f4       	brne	.+26     	; 0x280 <DIO_vwrite+0xcc>
     266:	22 b3       	in	r18, 0x12	; 18
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	ac 01       	movw	r20, r24
     26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_vwrite+0xc0>
     270:	44 0f       	add	r20, r20
     272:	55 1f       	adc	r21, r21
     274:	6a 95       	dec	r22
     276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_vwrite+0xbc>
     278:	ba 01       	movw	r22, r20
     27a:	62 2b       	or	r22, r18
     27c:	62 bb       	out	0x12, r22	; 18
     27e:	08 95       	ret
     280:	22 b3       	in	r18, 0x12	; 18
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	ac 01       	movw	r20, r24
     288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vwrite+0xda>
     28a:	44 0f       	add	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	6a 95       	dec	r22
     290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vwrite+0xd6>
     292:	ba 01       	movw	r22, r20
     294:	60 95       	com	r22
     296:	62 23       	and	r22, r18
     298:	62 bb       	out	0x12, r22	; 18
     29a:	08 95       	ret
     29c:	41 30       	cpi	r20, 0x01	; 1
     29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_vwrite+0x106>
     2a0:	25 b3       	in	r18, 0x15	; 21
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	ac 01       	movw	r20, r24
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_vwrite+0xfa>
     2aa:	44 0f       	add	r20, r20
     2ac:	55 1f       	adc	r21, r21
     2ae:	6a 95       	dec	r22
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_vwrite+0xf6>
     2b2:	ba 01       	movw	r22, r20
     2b4:	62 2b       	or	r22, r18
     2b6:	65 bb       	out	0x15, r22	; 21
     2b8:	08 95       	ret
     2ba:	25 b3       	in	r18, 0x15	; 21
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	ac 01       	movw	r20, r24
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_vwrite+0x114>
     2c4:	44 0f       	add	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	6a 95       	dec	r22
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_vwrite+0x110>
     2cc:	ba 01       	movw	r22, r20
     2ce:	60 95       	com	r22
     2d0:	62 23       	and	r22, r18
     2d2:	65 bb       	out	0x15, r22	; 21
     2d4:	08 95       	ret

000002d6 <DIO_vtogglepin>:
     2d6:	84 34       	cpi	r24, 0x44	; 68
     2d8:	81 f1       	breq	.+96     	; 0x33a <DIO_vtogglepin+0x64>
     2da:	85 34       	cpi	r24, 0x45	; 69
     2dc:	40 f4       	brcc	.+16     	; 0x2ee <DIO_vtogglepin+0x18>
     2de:	82 34       	cpi	r24, 0x42	; 66
     2e0:	f9 f0       	breq	.+62     	; 0x320 <DIO_vtogglepin+0x4a>
     2e2:	83 34       	cpi	r24, 0x43	; 67
     2e4:	b8 f5       	brcc	.+110    	; 0x354 <DIO_vtogglepin+0x7e>
     2e6:	81 34       	cpi	r24, 0x41	; 65
     2e8:	09 f0       	breq	.+2      	; 0x2ec <DIO_vtogglepin+0x16>
     2ea:	40 c0       	rjmp	.+128    	; 0x36c <DIO_vtogglepin+0x96>
     2ec:	0c c0       	rjmp	.+24     	; 0x306 <DIO_vtogglepin+0x30>
     2ee:	82 36       	cpi	r24, 0x62	; 98
     2f0:	b9 f0       	breq	.+46     	; 0x320 <DIO_vtogglepin+0x4a>
     2f2:	83 36       	cpi	r24, 0x63	; 99
     2f4:	18 f4       	brcc	.+6      	; 0x2fc <DIO_vtogglepin+0x26>
     2f6:	81 36       	cpi	r24, 0x61	; 97
     2f8:	c9 f5       	brne	.+114    	; 0x36c <DIO_vtogglepin+0x96>
     2fa:	05 c0       	rjmp	.+10     	; 0x306 <DIO_vtogglepin+0x30>
     2fc:	83 36       	cpi	r24, 0x63	; 99
     2fe:	51 f1       	breq	.+84     	; 0x354 <DIO_vtogglepin+0x7e>
     300:	84 36       	cpi	r24, 0x64	; 100
     302:	a1 f5       	brne	.+104    	; 0x36c <DIO_vtogglepin+0x96>
     304:	1a c0       	rjmp	.+52     	; 0x33a <DIO_vtogglepin+0x64>
     306:	2b b3       	in	r18, 0x1b	; 27
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	ac 01       	movw	r20, r24
     30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_vtogglepin+0x3e>
     310:	44 0f       	add	r20, r20
     312:	55 1f       	adc	r21, r21
     314:	6a 95       	dec	r22
     316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_vtogglepin+0x3a>
     318:	ba 01       	movw	r22, r20
     31a:	62 27       	eor	r22, r18
     31c:	6b bb       	out	0x1b, r22	; 27
     31e:	08 95       	ret
     320:	28 b3       	in	r18, 0x18	; 24
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	ac 01       	movw	r20, r24
     328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_vtogglepin+0x58>
     32a:	44 0f       	add	r20, r20
     32c:	55 1f       	adc	r21, r21
     32e:	6a 95       	dec	r22
     330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_vtogglepin+0x54>
     332:	ba 01       	movw	r22, r20
     334:	62 27       	eor	r22, r18
     336:	68 bb       	out	0x18, r22	; 24
     338:	08 95       	ret
     33a:	22 b3       	in	r18, 0x12	; 18
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	ac 01       	movw	r20, r24
     342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_vtogglepin+0x72>
     344:	44 0f       	add	r20, r20
     346:	55 1f       	adc	r21, r21
     348:	6a 95       	dec	r22
     34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_vtogglepin+0x6e>
     34c:	ba 01       	movw	r22, r20
     34e:	62 27       	eor	r22, r18
     350:	62 bb       	out	0x12, r22	; 18
     352:	08 95       	ret
     354:	25 b3       	in	r18, 0x15	; 21
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	ac 01       	movw	r20, r24
     35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_vtogglepin+0x8c>
     35e:	44 0f       	add	r20, r20
     360:	55 1f       	adc	r21, r21
     362:	6a 95       	dec	r22
     364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_vtogglepin+0x88>
     366:	ba 01       	movw	r22, r20
     368:	62 27       	eor	r22, r18
     36a:	65 bb       	out	0x15, r22	; 21
     36c:	08 95       	ret

0000036e <DIO_uread>:
     36e:	84 34       	cpi	r24, 0x44	; 68
     370:	09 f4       	brne	.+2      	; 0x374 <DIO_uread+0x6>
     372:	51 c0       	rjmp	.+162    	; 0x416 <DIO_uread+0xa8>
     374:	85 34       	cpi	r24, 0x45	; 69
     376:	40 f4       	brcc	.+16     	; 0x388 <DIO_uread+0x1a>
     378:	82 34       	cpi	r24, 0x42	; 66
     37a:	39 f1       	breq	.+78     	; 0x3ca <DIO_uread+0x5c>
     37c:	83 34       	cpi	r24, 0x43	; 67
     37e:	c0 f5       	brcc	.+112    	; 0x3f0 <DIO_uread+0x82>
     380:	81 34       	cpi	r24, 0x41	; 65
     382:	09 f0       	breq	.+2      	; 0x386 <DIO_uread+0x18>
     384:	5a c0       	rjmp	.+180    	; 0x43a <DIO_uread+0xcc>
     386:	0e c0       	rjmp	.+28     	; 0x3a4 <DIO_uread+0x36>
     388:	82 36       	cpi	r24, 0x62	; 98
     38a:	f9 f0       	breq	.+62     	; 0x3ca <DIO_uread+0x5c>
     38c:	83 36       	cpi	r24, 0x63	; 99
     38e:	20 f4       	brcc	.+8      	; 0x398 <DIO_uread+0x2a>
     390:	81 36       	cpi	r24, 0x61	; 97
     392:	09 f0       	breq	.+2      	; 0x396 <DIO_uread+0x28>
     394:	52 c0       	rjmp	.+164    	; 0x43a <DIO_uread+0xcc>
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <DIO_uread+0x36>
     398:	83 36       	cpi	r24, 0x63	; 99
     39a:	51 f1       	breq	.+84     	; 0x3f0 <DIO_uread+0x82>
     39c:	84 36       	cpi	r24, 0x64	; 100
     39e:	09 f0       	breq	.+2      	; 0x3a2 <DIO_uread+0x34>
     3a0:	4c c0       	rjmp	.+152    	; 0x43a <DIO_uread+0xcc>
     3a2:	39 c0       	rjmp	.+114    	; 0x416 <DIO_uread+0xa8>
     3a4:	29 b3       	in	r18, 0x19	; 25
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	06 2e       	mov	r0, r22
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_uread+0x44>
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	0a 94       	dec	r0
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_uread+0x40>
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	82 23       	and	r24, r18
     3ba:	93 23       	and	r25, r19
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_uread+0x54>
     3be:	96 95       	lsr	r25
     3c0:	87 95       	ror	r24
     3c2:	6a 95       	dec	r22
     3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_uread+0x50>
     3c6:	98 2f       	mov	r25, r24
     3c8:	38 c0       	rjmp	.+112    	; 0x43a <DIO_uread+0xcc>
     3ca:	26 b3       	in	r18, 0x16	; 22
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	06 2e       	mov	r0, r22
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_uread+0x6a>
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	0a 94       	dec	r0
     3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_uread+0x66>
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	82 23       	and	r24, r18
     3e0:	93 23       	and	r25, r19
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_uread+0x7a>
     3e4:	96 95       	lsr	r25
     3e6:	87 95       	ror	r24
     3e8:	6a 95       	dec	r22
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_uread+0x76>
     3ec:	98 2f       	mov	r25, r24
     3ee:	25 c0       	rjmp	.+74     	; 0x43a <DIO_uread+0xcc>
     3f0:	23 b3       	in	r18, 0x13	; 19
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	06 2e       	mov	r0, r22
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_uread+0x90>
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	0a 94       	dec	r0
     400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_uread+0x8c>
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	82 23       	and	r24, r18
     406:	93 23       	and	r25, r19
     408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_uread+0xa0>
     40a:	96 95       	lsr	r25
     40c:	87 95       	ror	r24
     40e:	6a 95       	dec	r22
     410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_uread+0x9c>
     412:	98 2f       	mov	r25, r24
     414:	12 c0       	rjmp	.+36     	; 0x43a <DIO_uread+0xcc>
     416:	20 b3       	in	r18, 0x10	; 16
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	06 2e       	mov	r0, r22
     41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_uread+0xb6>
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	0a 94       	dec	r0
     426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_uread+0xb2>
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	82 23       	and	r24, r18
     42c:	93 23       	and	r25, r19
     42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_uread+0xc6>
     430:	96 95       	lsr	r25
     432:	87 95       	ror	r24
     434:	6a 95       	dec	r22
     436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_uread+0xc2>
     438:	98 2f       	mov	r25, r24
     43a:	89 2f       	mov	r24, r25
     43c:	08 95       	ret

0000043e <DIO_vsetportdir>:
     43e:	84 34       	cpi	r24, 0x44	; 68
     440:	c9 f0       	breq	.+50     	; 0x474 <DIO_vsetportdir+0x36>
     442:	85 34       	cpi	r24, 0x45	; 69
     444:	38 f4       	brcc	.+14     	; 0x454 <DIO_vsetportdir+0x16>
     446:	82 34       	cpi	r24, 0x42	; 66
     448:	99 f0       	breq	.+38     	; 0x470 <DIO_vsetportdir+0x32>
     44a:	83 34       	cpi	r24, 0x43	; 67
     44c:	a8 f4       	brcc	.+42     	; 0x478 <DIO_vsetportdir+0x3a>
     44e:	81 34       	cpi	r24, 0x41	; 65
     450:	a1 f4       	brne	.+40     	; 0x47a <DIO_vsetportdir+0x3c>
     452:	0c c0       	rjmp	.+24     	; 0x46c <DIO_vsetportdir+0x2e>
     454:	82 36       	cpi	r24, 0x62	; 98
     456:	61 f0       	breq	.+24     	; 0x470 <DIO_vsetportdir+0x32>
     458:	83 36       	cpi	r24, 0x63	; 99
     45a:	18 f4       	brcc	.+6      	; 0x462 <DIO_vsetportdir+0x24>
     45c:	81 36       	cpi	r24, 0x61	; 97
     45e:	69 f4       	brne	.+26     	; 0x47a <DIO_vsetportdir+0x3c>
     460:	05 c0       	rjmp	.+10     	; 0x46c <DIO_vsetportdir+0x2e>
     462:	83 36       	cpi	r24, 0x63	; 99
     464:	49 f0       	breq	.+18     	; 0x478 <DIO_vsetportdir+0x3a>
     466:	84 36       	cpi	r24, 0x64	; 100
     468:	41 f4       	brne	.+16     	; 0x47a <DIO_vsetportdir+0x3c>
     46a:	04 c0       	rjmp	.+8      	; 0x474 <DIO_vsetportdir+0x36>
     46c:	6a bb       	out	0x1a, r22	; 26
     46e:	08 95       	ret
     470:	67 bb       	out	0x17, r22	; 23
     472:	08 95       	ret
     474:	61 bb       	out	0x11, r22	; 17
     476:	08 95       	ret
     478:	64 bb       	out	0x14, r22	; 20
     47a:	08 95       	ret

0000047c <DIO_vWRITEport>:
     47c:	84 34       	cpi	r24, 0x44	; 68
     47e:	c9 f0       	breq	.+50     	; 0x4b2 <DIO_vWRITEport+0x36>
     480:	85 34       	cpi	r24, 0x45	; 69
     482:	38 f4       	brcc	.+14     	; 0x492 <DIO_vWRITEport+0x16>
     484:	82 34       	cpi	r24, 0x42	; 66
     486:	99 f0       	breq	.+38     	; 0x4ae <DIO_vWRITEport+0x32>
     488:	83 34       	cpi	r24, 0x43	; 67
     48a:	a8 f4       	brcc	.+42     	; 0x4b6 <DIO_vWRITEport+0x3a>
     48c:	81 34       	cpi	r24, 0x41	; 65
     48e:	a1 f4       	brne	.+40     	; 0x4b8 <DIO_vWRITEport+0x3c>
     490:	0c c0       	rjmp	.+24     	; 0x4aa <DIO_vWRITEport+0x2e>
     492:	82 36       	cpi	r24, 0x62	; 98
     494:	61 f0       	breq	.+24     	; 0x4ae <DIO_vWRITEport+0x32>
     496:	83 36       	cpi	r24, 0x63	; 99
     498:	18 f4       	brcc	.+6      	; 0x4a0 <DIO_vWRITEport+0x24>
     49a:	81 36       	cpi	r24, 0x61	; 97
     49c:	69 f4       	brne	.+26     	; 0x4b8 <DIO_vWRITEport+0x3c>
     49e:	05 c0       	rjmp	.+10     	; 0x4aa <DIO_vWRITEport+0x2e>
     4a0:	83 36       	cpi	r24, 0x63	; 99
     4a2:	49 f0       	breq	.+18     	; 0x4b6 <DIO_vWRITEport+0x3a>
     4a4:	84 36       	cpi	r24, 0x64	; 100
     4a6:	41 f4       	brne	.+16     	; 0x4b8 <DIO_vWRITEport+0x3c>
     4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <DIO_vWRITEport+0x36>
     4aa:	6b bb       	out	0x1b, r22	; 27
     4ac:	08 95       	ret
     4ae:	68 bb       	out	0x18, r22	; 24
     4b0:	08 95       	ret
     4b2:	62 bb       	out	0x12, r22	; 18
     4b4:	08 95       	ret
     4b6:	65 bb       	out	0x15, r22	; 21
     4b8:	08 95       	ret

000004ba <DIO_ureadport>:
     4ba:	84 34       	cpi	r24, 0x44	; 68
     4bc:	d1 f0       	breq	.+52     	; 0x4f2 <DIO_ureadport+0x38>
     4be:	85 34       	cpi	r24, 0x45	; 69
     4c0:	38 f4       	brcc	.+14     	; 0x4d0 <DIO_ureadport+0x16>
     4c2:	82 34       	cpi	r24, 0x42	; 66
     4c4:	99 f0       	breq	.+38     	; 0x4ec <DIO_ureadport+0x32>
     4c6:	83 34       	cpi	r24, 0x43	; 67
     4c8:	b8 f4       	brcc	.+46     	; 0x4f8 <DIO_ureadport+0x3e>
     4ca:	81 34       	cpi	r24, 0x41	; 65
     4cc:	b9 f4       	brne	.+46     	; 0x4fc <DIO_ureadport+0x42>
     4ce:	0c c0       	rjmp	.+24     	; 0x4e8 <DIO_ureadport+0x2e>
     4d0:	82 36       	cpi	r24, 0x62	; 98
     4d2:	61 f0       	breq	.+24     	; 0x4ec <DIO_ureadport+0x32>
     4d4:	83 36       	cpi	r24, 0x63	; 99
     4d6:	18 f4       	brcc	.+6      	; 0x4de <DIO_ureadport+0x24>
     4d8:	81 36       	cpi	r24, 0x61	; 97
     4da:	81 f4       	brne	.+32     	; 0x4fc <DIO_ureadport+0x42>
     4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <DIO_ureadport+0x2e>
     4de:	83 36       	cpi	r24, 0x63	; 99
     4e0:	59 f0       	breq	.+22     	; 0x4f8 <DIO_ureadport+0x3e>
     4e2:	84 36       	cpi	r24, 0x64	; 100
     4e4:	59 f4       	brne	.+22     	; 0x4fc <DIO_ureadport+0x42>
     4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <DIO_ureadport+0x38>
     4e8:	99 b3       	in	r25, 0x19	; 25
     4ea:	08 c0       	rjmp	.+16     	; 0x4fc <DIO_ureadport+0x42>
     4ec:	86 b3       	in	r24, 0x16	; 22
     4ee:	88 bb       	out	0x18, r24	; 24
     4f0:	05 c0       	rjmp	.+10     	; 0x4fc <DIO_ureadport+0x42>
     4f2:	80 b3       	in	r24, 0x10	; 16
     4f4:	82 bb       	out	0x12, r24	; 18
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_ureadport+0x42>
     4f8:	83 b3       	in	r24, 0x13	; 19
     4fa:	85 bb       	out	0x15, r24	; 21
     4fc:	89 2f       	mov	r24, r25
     4fe:	08 95       	ret

00000500 <DIO_vtoggleport>:
     500:	84 34       	cpi	r24, 0x44	; 68
     502:	e9 f0       	breq	.+58     	; 0x53e <DIO_vtoggleport+0x3e>
     504:	85 34       	cpi	r24, 0x45	; 69
     506:	38 f4       	brcc	.+14     	; 0x516 <DIO_vtoggleport+0x16>
     508:	82 34       	cpi	r24, 0x42	; 66
     50a:	a9 f0       	breq	.+42     	; 0x536 <DIO_vtoggleport+0x36>
     50c:	83 34       	cpi	r24, 0x43	; 67
     50e:	d8 f4       	brcc	.+54     	; 0x546 <DIO_vtoggleport+0x46>
     510:	81 34       	cpi	r24, 0x41	; 65
     512:	e1 f4       	brne	.+56     	; 0x54c <DIO_vtoggleport+0x4c>
     514:	0c c0       	rjmp	.+24     	; 0x52e <DIO_vtoggleport+0x2e>
     516:	82 36       	cpi	r24, 0x62	; 98
     518:	71 f0       	breq	.+28     	; 0x536 <DIO_vtoggleport+0x36>
     51a:	83 36       	cpi	r24, 0x63	; 99
     51c:	18 f4       	brcc	.+6      	; 0x524 <DIO_vtoggleport+0x24>
     51e:	81 36       	cpi	r24, 0x61	; 97
     520:	a9 f4       	brne	.+42     	; 0x54c <DIO_vtoggleport+0x4c>
     522:	05 c0       	rjmp	.+10     	; 0x52e <DIO_vtoggleport+0x2e>
     524:	83 36       	cpi	r24, 0x63	; 99
     526:	79 f0       	breq	.+30     	; 0x546 <DIO_vtoggleport+0x46>
     528:	84 36       	cpi	r24, 0x64	; 100
     52a:	81 f4       	brne	.+32     	; 0x54c <DIO_vtoggleport+0x4c>
     52c:	08 c0       	rjmp	.+16     	; 0x53e <DIO_vtoggleport+0x3e>
     52e:	8b b3       	in	r24, 0x1b	; 27
     530:	80 95       	com	r24
     532:	8b bb       	out	0x1b, r24	; 27
     534:	08 95       	ret
     536:	88 b3       	in	r24, 0x18	; 24
     538:	80 95       	com	r24
     53a:	88 bb       	out	0x18, r24	; 24
     53c:	08 95       	ret
     53e:	82 b3       	in	r24, 0x12	; 18
     540:	80 95       	com	r24
     542:	82 bb       	out	0x12, r24	; 18
     544:	08 95       	ret
     546:	85 b3       	in	r24, 0x15	; 21
     548:	80 95       	com	r24
     54a:	85 bb       	out	0x15, r24	; 21
     54c:	08 95       	ret

0000054e <DIO_vconnectpullup>:
     54e:	82 34       	cpi	r24, 0x42	; 66
     550:	51 f1       	breq	.+84     	; 0x5a6 <DIO_vconnectpullup+0x58>
     552:	83 34       	cpi	r24, 0x43	; 67
     554:	20 f4       	brcc	.+8      	; 0x55e <DIO_vconnectpullup+0x10>
     556:	81 34       	cpi	r24, 0x41	; 65
     558:	09 f0       	breq	.+2      	; 0x55c <DIO_vconnectpullup+0xe>
     55a:	7b c0       	rjmp	.+246    	; 0x652 <DIO_vconnectpullup+0x104>
     55c:	07 c0       	rjmp	.+14     	; 0x56c <DIO_vconnectpullup+0x1e>
     55e:	83 34       	cpi	r24, 0x43	; 67
     560:	09 f4       	brne	.+2      	; 0x564 <DIO_vconnectpullup+0x16>
     562:	3e c0       	rjmp	.+124    	; 0x5e0 <DIO_vconnectpullup+0x92>
     564:	84 34       	cpi	r24, 0x44	; 68
     566:	09 f0       	breq	.+2      	; 0x56a <DIO_vconnectpullup+0x1c>
     568:	74 c0       	rjmp	.+232    	; 0x652 <DIO_vconnectpullup+0x104>
     56a:	57 c0       	rjmp	.+174    	; 0x61a <DIO_vconnectpullup+0xcc>
     56c:	41 30       	cpi	r20, 0x01	; 1
     56e:	69 f4       	brne	.+26     	; 0x58a <DIO_vconnectpullup+0x3c>
     570:	2b b3       	in	r18, 0x1b	; 27
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	ac 01       	movw	r20, r24
     578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_vconnectpullup+0x30>
     57a:	44 0f       	add	r20, r20
     57c:	55 1f       	adc	r21, r21
     57e:	6a 95       	dec	r22
     580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_vconnectpullup+0x2c>
     582:	ba 01       	movw	r22, r20
     584:	62 2b       	or	r22, r18
     586:	6b bb       	out	0x1b, r22	; 27
     588:	08 95       	ret
     58a:	2b b3       	in	r18, 0x1b	; 27
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	ac 01       	movw	r20, r24
     592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_vconnectpullup+0x4a>
     594:	44 0f       	add	r20, r20
     596:	55 1f       	adc	r21, r21
     598:	6a 95       	dec	r22
     59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_vconnectpullup+0x46>
     59c:	ba 01       	movw	r22, r20
     59e:	60 95       	com	r22
     5a0:	62 23       	and	r22, r18
     5a2:	6b bb       	out	0x1b, r22	; 27
     5a4:	08 95       	ret
     5a6:	41 30       	cpi	r20, 0x01	; 1
     5a8:	69 f4       	brne	.+26     	; 0x5c4 <DIO_vconnectpullup+0x76>
     5aa:	28 b3       	in	r18, 0x18	; 24
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	ac 01       	movw	r20, r24
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_vconnectpullup+0x6a>
     5b4:	44 0f       	add	r20, r20
     5b6:	55 1f       	adc	r21, r21
     5b8:	6a 95       	dec	r22
     5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_vconnectpullup+0x66>
     5bc:	ba 01       	movw	r22, r20
     5be:	62 2b       	or	r22, r18
     5c0:	68 bb       	out	0x18, r22	; 24
     5c2:	08 95       	ret
     5c4:	28 b3       	in	r18, 0x18	; 24
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	ac 01       	movw	r20, r24
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_vconnectpullup+0x84>
     5ce:	44 0f       	add	r20, r20
     5d0:	55 1f       	adc	r21, r21
     5d2:	6a 95       	dec	r22
     5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_vconnectpullup+0x80>
     5d6:	ba 01       	movw	r22, r20
     5d8:	60 95       	com	r22
     5da:	62 23       	and	r22, r18
     5dc:	68 bb       	out	0x18, r22	; 24
     5de:	08 95       	ret
     5e0:	41 30       	cpi	r20, 0x01	; 1
     5e2:	69 f4       	brne	.+26     	; 0x5fe <DIO_vconnectpullup+0xb0>
     5e4:	25 b3       	in	r18, 0x15	; 21
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	ac 01       	movw	r20, r24
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_vconnectpullup+0xa4>
     5ee:	44 0f       	add	r20, r20
     5f0:	55 1f       	adc	r21, r21
     5f2:	6a 95       	dec	r22
     5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_vconnectpullup+0xa0>
     5f6:	ba 01       	movw	r22, r20
     5f8:	62 2b       	or	r22, r18
     5fa:	65 bb       	out	0x15, r22	; 21
     5fc:	08 95       	ret
     5fe:	25 b3       	in	r18, 0x15	; 21
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	ac 01       	movw	r20, r24
     606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_vconnectpullup+0xbe>
     608:	44 0f       	add	r20, r20
     60a:	55 1f       	adc	r21, r21
     60c:	6a 95       	dec	r22
     60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_vconnectpullup+0xba>
     610:	ba 01       	movw	r22, r20
     612:	60 95       	com	r22
     614:	62 23       	and	r22, r18
     616:	65 bb       	out	0x15, r22	; 21
     618:	08 95       	ret
     61a:	41 30       	cpi	r20, 0x01	; 1
     61c:	69 f4       	brne	.+26     	; 0x638 <DIO_vconnectpullup+0xea>
     61e:	22 b3       	in	r18, 0x12	; 18
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	ac 01       	movw	r20, r24
     626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_vconnectpullup+0xde>
     628:	44 0f       	add	r20, r20
     62a:	55 1f       	adc	r21, r21
     62c:	6a 95       	dec	r22
     62e:	e2 f7       	brpl	.-8      	; 0x628 <DIO_vconnectpullup+0xda>
     630:	ba 01       	movw	r22, r20
     632:	62 2b       	or	r22, r18
     634:	62 bb       	out	0x12, r22	; 18
     636:	08 95       	ret
     638:	22 b3       	in	r18, 0x12	; 18
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	ac 01       	movw	r20, r24
     640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_vconnectpullup+0xf8>
     642:	44 0f       	add	r20, r20
     644:	55 1f       	adc	r21, r21
     646:	6a 95       	dec	r22
     648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_vconnectpullup+0xf4>
     64a:	ba 01       	movw	r22, r20
     64c:	60 95       	com	r22
     64e:	62 23       	and	r22, r18
     650:	62 bb       	out	0x12, r22	; 18
     652:	08 95       	ret

00000654 <write_low_nibble>:
     654:	6f 70       	andi	r22, 0x0F	; 15
     656:	82 34       	cpi	r24, 0x42	; 66
     658:	89 f0       	breq	.+34     	; 0x67c <write_low_nibble+0x28>
     65a:	83 34       	cpi	r24, 0x43	; 67
     65c:	18 f4       	brcc	.+6      	; 0x664 <write_low_nibble+0x10>
     65e:	81 34       	cpi	r24, 0x41	; 65
     660:	09 f5       	brne	.+66     	; 0x6a4 <write_low_nibble+0x50>
     662:	05 c0       	rjmp	.+10     	; 0x66e <write_low_nibble+0x1a>
     664:	83 34       	cpi	r24, 0x43	; 67
     666:	89 f0       	breq	.+34     	; 0x68a <write_low_nibble+0x36>
     668:	84 34       	cpi	r24, 0x44	; 68
     66a:	e1 f4       	brne	.+56     	; 0x6a4 <write_low_nibble+0x50>
     66c:	15 c0       	rjmp	.+42     	; 0x698 <write_low_nibble+0x44>
     66e:	8b b3       	in	r24, 0x1b	; 27
     670:	80 7f       	andi	r24, 0xF0	; 240
     672:	8b bb       	out	0x1b, r24	; 27
     674:	8b b3       	in	r24, 0x1b	; 27
     676:	68 2b       	or	r22, r24
     678:	6b bb       	out	0x1b, r22	; 27
     67a:	08 95       	ret
     67c:	88 b3       	in	r24, 0x18	; 24
     67e:	80 7f       	andi	r24, 0xF0	; 240
     680:	88 bb       	out	0x18, r24	; 24
     682:	88 b3       	in	r24, 0x18	; 24
     684:	68 2b       	or	r22, r24
     686:	68 bb       	out	0x18, r22	; 24
     688:	08 95       	ret
     68a:	85 b3       	in	r24, 0x15	; 21
     68c:	80 7f       	andi	r24, 0xF0	; 240
     68e:	85 bb       	out	0x15, r24	; 21
     690:	85 b3       	in	r24, 0x15	; 21
     692:	68 2b       	or	r22, r24
     694:	65 bb       	out	0x15, r22	; 21
     696:	08 95       	ret
     698:	82 b3       	in	r24, 0x12	; 18
     69a:	80 7f       	andi	r24, 0xF0	; 240
     69c:	82 bb       	out	0x12, r24	; 18
     69e:	82 b3       	in	r24, 0x12	; 18
     6a0:	68 2b       	or	r22, r24
     6a2:	62 bb       	out	0x12, r22	; 18
     6a4:	08 95       	ret

000006a6 <write_high_nibble>:
     6a6:	62 95       	swap	r22
     6a8:	60 7f       	andi	r22, 0xF0	; 240
     6aa:	82 34       	cpi	r24, 0x42	; 66
     6ac:	89 f0       	breq	.+34     	; 0x6d0 <write_high_nibble+0x2a>
     6ae:	83 34       	cpi	r24, 0x43	; 67
     6b0:	18 f4       	brcc	.+6      	; 0x6b8 <write_high_nibble+0x12>
     6b2:	81 34       	cpi	r24, 0x41	; 65
     6b4:	09 f5       	brne	.+66     	; 0x6f8 <write_high_nibble+0x52>
     6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <write_high_nibble+0x1c>
     6b8:	83 34       	cpi	r24, 0x43	; 67
     6ba:	89 f0       	breq	.+34     	; 0x6de <write_high_nibble+0x38>
     6bc:	84 34       	cpi	r24, 0x44	; 68
     6be:	e1 f4       	brne	.+56     	; 0x6f8 <write_high_nibble+0x52>
     6c0:	15 c0       	rjmp	.+42     	; 0x6ec <write_high_nibble+0x46>
     6c2:	8b b3       	in	r24, 0x1b	; 27
     6c4:	8f 70       	andi	r24, 0x0F	; 15
     6c6:	8b bb       	out	0x1b, r24	; 27
     6c8:	8b b3       	in	r24, 0x1b	; 27
     6ca:	68 2b       	or	r22, r24
     6cc:	6b bb       	out	0x1b, r22	; 27
     6ce:	08 95       	ret
     6d0:	88 b3       	in	r24, 0x18	; 24
     6d2:	8f 70       	andi	r24, 0x0F	; 15
     6d4:	88 bb       	out	0x18, r24	; 24
     6d6:	88 b3       	in	r24, 0x18	; 24
     6d8:	68 2b       	or	r22, r24
     6da:	68 bb       	out	0x18, r22	; 24
     6dc:	08 95       	ret
     6de:	85 b3       	in	r24, 0x15	; 21
     6e0:	8f 70       	andi	r24, 0x0F	; 15
     6e2:	85 bb       	out	0x15, r24	; 21
     6e4:	85 b3       	in	r24, 0x15	; 21
     6e6:	68 2b       	or	r22, r24
     6e8:	65 bb       	out	0x15, r22	; 21
     6ea:	08 95       	ret
     6ec:	82 b3       	in	r24, 0x12	; 18
     6ee:	8f 70       	andi	r24, 0x0F	; 15
     6f0:	82 bb       	out	0x12, r24	; 18
     6f2:	82 b3       	in	r24, 0x12	; 18
     6f4:	68 2b       	or	r22, r24
     6f6:	62 bb       	out	0x12, r22	; 18
     6f8:	08 95       	ret

000006fa <eeprom_write>:
     6fa:	8e bb       	out	0x1e, r24	; 30
     6fc:	9f bb       	out	0x1f, r25	; 31
     6fe:	6d bb       	out	0x1d, r22	; 29
     700:	e2 9a       	sbi	0x1c, 2	; 28
     702:	e1 9a       	sbi	0x1c, 1	; 28
     704:	e1 99       	sbic	0x1c, 1	; 28
     706:	fe cf       	rjmp	.-4      	; 0x704 <eeprom_write+0xa>
     708:	08 95       	ret

0000070a <eeprom_read>:
     70a:	8e bb       	out	0x1e, r24	; 30
     70c:	9f bb       	out	0x1f, r25	; 31
     70e:	e0 9a       	sbi	0x1c, 0	; 28
     710:	8d b3       	in	r24, 0x1d	; 29
     712:	08 95       	ret

00000714 <keypad_vinit>:
{/*or 
	 DIO_vsetportdir('D',0X0F);  0b0000    1111
	*/

	//output row
	DIO_vsetpindir('D',0,1);
     714:	84 e4       	ldi	r24, 0x44	; 68
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	41 e0       	ldi	r20, 0x01	; 1
     71a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
DIO_vsetpindir('D',1,1);
     71e:	84 e4       	ldi	r24, 0x44	; 68
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	41 e0       	ldi	r20, 0x01	; 1
     724:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
	DIO_vsetpindir('D',2,1);
     728:	84 e4       	ldi	r24, 0x44	; 68
     72a:	62 e0       	ldi	r22, 0x02	; 2
     72c:	41 e0       	ldi	r20, 0x01	; 1
     72e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
	DIO_vsetpindir('D',3,1);
     732:	84 e4       	ldi	r24, 0x44	; 68
     734:	63 e0       	ldi	r22, 0x03	; 3
     736:	41 e0       	ldi	r20, 0x01	; 1
     738:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
	//input col
	DIO_vsetpindir('A',0,0);
     73c:	81 e4       	ldi	r24, 0x41	; 65
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
	DIO_vsetpindir('A',1,0);
     746:	81 e4       	ldi	r24, 0x41	; 65
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
	DIO_vsetpindir('A',2,0);
     750:	81 e4       	ldi	r24, 0x41	; 65
     752:	62 e0       	ldi	r22, 0x02	; 2
     754:	40 e0       	ldi	r20, 0x00	; 0
     756:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
	DIO_vsetpindir('A',3,0);
     75a:	81 e4       	ldi	r24, 0x41	; 65
     75c:	63 e0       	ldi	r22, 0x03	; 3
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
	//internal pull-up

	DIO_vconnectpullup('A',0,1);
     764:	81 e4       	ldi	r24, 0x41	; 65
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	41 e0       	ldi	r20, 0x01	; 1
     76a:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_vconnectpullup>
	DIO_vconnectpullup('A',1,1);
     76e:	81 e4       	ldi	r24, 0x41	; 65
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	41 e0       	ldi	r20, 0x01	; 1
     774:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_vconnectpullup>
	DIO_vconnectpullup('A',2,1);
     778:	81 e4       	ldi	r24, 0x41	; 65
     77a:	62 e0       	ldi	r22, 0x02	; 2
     77c:	41 e0       	ldi	r20, 0x01	; 1
     77e:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_vconnectpullup>
	DIO_vconnectpullup('A',3,1);
     782:	81 e4       	ldi	r24, 0x41	; 65
     784:	63 e0       	ldi	r22, 0x03	; 3
     786:	41 e0       	ldi	r20, 0x01	; 1
     788:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_vconnectpullup>
}
     78c:	08 95       	ret

0000078e <keypad_u8check_press>:


char keypad_u8check_press()
{
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	60 97       	sbiw	r28, 0x10	; 16
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
	//proteus design
//char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	//hardware
char arr[4][4]={{'1','2','3','/'},{'4','5','6','*'},{'7','8','9','-'},{'A','0','=','+'}};
     7a6:	de 01       	movw	r26, r28
     7a8:	11 96       	adiw	r26, 0x01	; 1
     7aa:	e0 e6       	ldi	r30, 0x60	; 96
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	80 e1       	ldi	r24, 0x10	; 16
     7b0:	01 90       	ld	r0, Z+
     7b2:	0d 92       	st	X+, r0
     7b4:	81 50       	subi	r24, 0x01	; 1
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <keypad_u8check_press+0x22>
char row,coloumn,x;

char returnval=NOTPRESSED;//0xff
for(row=0    ;   row  <  4  ;   row++)
     7b8:	00 e0       	ldi	r16, 0x00	; 0
{
	DIO_vwrite('D',0,1);
     7ba:	84 e4       	ldi	r24, 0x44	; 68
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	41 e0       	ldi	r20, 0x01	; 1
     7c0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	DIO_vwrite('D',1,1);
     7c4:	84 e4       	ldi	r24, 0x44	; 68
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	DIO_vwrite('D',2,1);
     7ce:	84 e4       	ldi	r24, 0x44	; 68
     7d0:	62 e0       	ldi	r22, 0x02	; 2
     7d2:	41 e0       	ldi	r20, 0x01	; 1
     7d4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	DIO_vwrite('D',3,1);
     7d8:	84 e4       	ldi	r24, 0x44	; 68
     7da:	63 e0       	ldi	r22, 0x03	; 3
     7dc:	41 e0       	ldi	r20, 0x01	; 1
     7de:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	DIO_vwrite('D',row,0);
     7e2:	84 e4       	ldi	r24, 0x44	; 68
     7e4:	60 2f       	mov	r22, r16
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	for(coloumn=0;coloumn<4;coloumn++)
     7ec:	10 e0       	ldi	r17, 0x00	; 0
	{
		x=DIO_uread('A',(coloumn));
     7ee:	81 e4       	ldi	r24, 0x41	; 65
     7f0:	61 2f       	mov	r22, r17
     7f2:	0e 94 b7 01 	call	0x36e	; 0x36e <DIO_uread>
		
if(x==0)
     7f6:	88 23       	and	r24, r24
     7f8:	61 f4       	brne	.+24     	; 0x812 <keypad_u8check_press+0x84>
{
	returnval=arr[row][coloumn];
     7fa:	e0 2f       	mov	r30, r16
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	ee 0f       	add	r30, r30
     800:	ff 1f       	adc	r31, r31
     802:	ee 0f       	add	r30, r30
     804:	ff 1f       	adc	r31, r31
     806:	e1 0f       	add	r30, r17
     808:	f1 1d       	adc	r31, r1
     80a:	ec 0f       	add	r30, r28
     80c:	fd 1f       	adc	r31, r29
     80e:	81 81       	ldd	r24, Z+1	; 0x01
     810:	04 c0       	rjmp	.+8      	; 0x81a <keypad_u8check_press+0x8c>
	DIO_vwrite('D',0,1);
	DIO_vwrite('D',1,1);
	DIO_vwrite('D',2,1);
	DIO_vwrite('D',3,1);
	DIO_vwrite('D',row,0);
	for(coloumn=0;coloumn<4;coloumn++)
     812:	1f 5f       	subi	r17, 0xFF	; 255
     814:	14 30       	cpi	r17, 0x04	; 4
     816:	59 f7       	brne	.-42     	; 0x7ee <keypad_u8check_press+0x60>
     818:	0b c0       	rjmp	.+22     	; 0x830 <keypad_u8check_press+0xa2>
{
 break;
}
 } 
 return returnval ; 
 }
     81a:	60 96       	adiw	r28, 0x10	; 16
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	08 95       	ret
	//hardware
char arr[4][4]={{'1','2','3','/'},{'4','5','6','*'},{'7','8','9','-'},{'A','0','=','+'}};
char row,coloumn,x;

char returnval=NOTPRESSED;//0xff
for(row=0    ;   row  <  4  ;   row++)
     830:	0f 5f       	subi	r16, 0xFF	; 255
     832:	04 30       	cpi	r16, 0x04	; 4
     834:	11 f6       	brne	.-124    	; 0x7ba <keypad_u8check_press+0x2c>
     836:	8f ef       	ldi	r24, 0xFF	; 255
     838:	f0 cf       	rjmp	.-32     	; 0x81a <keypad_u8check_press+0x8c>

0000083a <send_falling_edge>:



static void send_falling_edge(void)
{
	DIO_vwrite('B',EN,1);//V=5
     83a:	82 e4       	ldi	r24, 0x42	; 66
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	41 e0       	ldi	r20, 0x01	; 1
     840:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     844:	8f e9       	ldi	r24, 0x9F	; 159
     846:	9f e0       	ldi	r25, 0x0F	; 15
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <send_falling_edge+0xe>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <send_falling_edge+0x14>
     84e:	00 00       	nop
	_delay_ms(2);
	DIO_vwrite('B',EN,0); //V=0
     850:	82 e4       	ldi	r24, 0x42	; 66
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
     85a:	8f e9       	ldi	r24, 0x9F	; 159
     85c:	9f e0       	ldi	r25, 0x0F	; 15
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <send_falling_edge+0x24>
     862:	00 c0       	rjmp	.+0      	; 0x864 <__stack+0x5>
     864:	00 00       	nop
	_delay_ms(2);
}
     866:	08 95       	ret

00000868 <LCD_vsend_cmd>:


void LCD_vsend_cmd(char cmd)
{
     868:	cf 93       	push	r28
     86a:	c8 2f       	mov	r28, r24
	DIO_vWRITEport('A',cmd);
	DIO_vwrite('B',RS,0);//commend reg
	send_falling_edge();

	#elif defined four_bits_mode*/
	write_high_nibble('A',cmd>>4);
     86c:	68 2f       	mov	r22, r24
     86e:	62 95       	swap	r22
     870:	6f 70       	andi	r22, 0x0F	; 15
     872:	81 e4       	ldi	r24, 0x41	; 65
     874:	0e 94 53 03 	call	0x6a6	; 0x6a6 <write_high_nibble>
	DIO_vwrite('B',RS,0);
     878:	82 e4       	ldi	r24, 0x42	; 66
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	send_falling_edge();
     882:	0e 94 1d 04 	call	0x83a	; 0x83a <send_falling_edge>
	
	write_high_nibble('A',cmd);
     886:	81 e4       	ldi	r24, 0x41	; 65
     888:	6c 2f       	mov	r22, r28
     88a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <write_high_nibble>
	DIO_vwrite('B',RS,0);
     88e:	82 e4       	ldi	r24, 0x42	; 66
     890:	61 e0       	ldi	r22, 0x01	; 1
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	send_falling_edge();
     898:	0e 94 1d 04 	call	0x83a	; 0x83a <send_falling_edge>
     89c:	8f ec       	ldi	r24, 0xCF	; 207
     89e:	97 e0       	ldi	r25, 0x07	; 7
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <LCD_vsend_cmd+0x38>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <LCD_vsend_cmd+0x3e>
     8a6:	00 00       	nop
	_delay_ms(1);
	//#endif
}
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <LCD_vinit>:
     8ac:	8f ef       	ldi	r24, 0xFF	; 255
     8ae:	91 ee       	ldi	r25, 0xE1	; 225
     8b0:	a4 e0       	ldi	r26, 0x04	; 4
     8b2:	81 50       	subi	r24, 0x01	; 1
     8b4:	90 40       	sbci	r25, 0x00	; 0
     8b6:	a0 40       	sbci	r26, 0x00	; 0
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <LCD_vinit+0x6>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <LCD_vinit+0x10>
     8bc:	00 00       	nop
	_delay_ms(10);
	LCD_vsend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);

	#elif defined four_bits_mode*/
		DIO_vsetpindir('A',4,1);
     8be:	81 e4       	ldi	r24, 0x41	; 65
     8c0:	64 e0       	ldi	r22, 0x04	; 4
     8c2:	41 e0       	ldi	r20, 0x01	; 1
     8c4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
		DIO_vsetpindir('A',5,1);
     8c8:	81 e4       	ldi	r24, 0x41	; 65
     8ca:	65 e0       	ldi	r22, 0x05	; 5
     8cc:	41 e0       	ldi	r20, 0x01	; 1
     8ce:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
		DIO_vsetpindir('A',6,1);
     8d2:	81 e4       	ldi	r24, 0x41	; 65
     8d4:	66 e0       	ldi	r22, 0x06	; 6
     8d6:	41 e0       	ldi	r20, 0x01	; 1
     8d8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
		DIO_vsetpindir('A',7,1);
     8dc:	81 e4       	ldi	r24, 0x41	; 65
     8de:	67 e0       	ldi	r22, 0x07	; 7
     8e0:	41 e0       	ldi	r20, 0x01	; 1
     8e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
		DIO_vsetpindir('B',EN,1);
     8e6:	82 e4       	ldi	r24, 0x42	; 66
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	41 e0       	ldi	r20, 0x01	; 1
     8ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
		DIO_vsetpindir('B',RW,1);
     8f0:	82 e4       	ldi	r24, 0x42	; 66
     8f2:	62 e0       	ldi	r22, 0x02	; 2
     8f4:	41 e0       	ldi	r20, 0x01	; 1
     8f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
		DIO_vsetpindir('B',RS,1);
     8fa:	82 e4       	ldi	r24, 0x42	; 66
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	41 e0       	ldi	r20, 0x01	; 1
     900:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>

DIO_vwrite('B',RW,0);
     904:	82 e4       	ldi	r24, 0x42	; 66
     906:	62 e0       	ldi	r22, 0x02	; 2
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
 LCD_vsend_cmd(RETURN_HOME); //return home
     90e:	82 e0       	ldi	r24, 0x02	; 2
     910:	0e 94 34 04 	call	0x868	; 0x868 <LCD_vsend_cmd>
     914:	af e1       	ldi	r26, 0x1F	; 31
     916:	be e4       	ldi	r27, 0x4E	; 78
     918:	11 97       	sbiw	r26, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <LCD_vinit+0x6c>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <LCD_vinit+0x72>
     91e:	00 00       	nop
 _delay_ms(10);
 LCD_vsend_cmd(FOUR_BITS); //4bit mode 0X28
     920:	88 e2       	ldi	r24, 0x28	; 40
     922:	0e 94 34 04 	call	0x868	; 0x868 <LCD_vsend_cmd>
     926:	8f ec       	ldi	r24, 0xCF	; 207
     928:	97 e0       	ldi	r25, 0x07	; 7
     92a:	01 97       	sbiw	r24, 0x01	; 1
     92c:	f1 f7       	brne	.-4      	; 0x92a <LCD_vinit+0x7e>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <LCD_vinit+0x84>
     930:	00 00       	nop
 _delay_ms(1);
 LCD_vsend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
     932:	8c e0       	ldi	r24, 0x0C	; 12
     934:	0e 94 34 04 	call	0x868	; 0x868 <LCD_vsend_cmd>
     938:	af ec       	ldi	r26, 0xCF	; 207
     93a:	b7 e0       	ldi	r27, 0x07	; 7
     93c:	11 97       	sbiw	r26, 0x01	; 1
     93e:	f1 f7       	brne	.-4      	; 0x93c <LCD_vinit+0x90>
     940:	00 c0       	rjmp	.+0      	; 0x942 <LCD_vinit+0x96>
     942:	00 00       	nop
 _delay_ms(1);
 LCD_vsend_cmd(CLR_SCREEN);//clear the screen
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	0e 94 34 04 	call	0x868	; 0x868 <LCD_vsend_cmd>
     94a:	8f e1       	ldi	r24, 0x1F	; 31
     94c:	9e e4       	ldi	r25, 0x4E	; 78
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <LCD_vinit+0xa2>
     952:	00 c0       	rjmp	.+0      	; 0x954 <LCD_vinit+0xa8>
     954:	00 00       	nop
 _delay_ms(10);
 LCD_vsend_cmd(ENTRY_MODE); //entry mode
     956:	86 e0       	ldi	r24, 0x06	; 6
     958:	0e 94 34 04 	call	0x868	; 0x868 <LCD_vsend_cmd>
     95c:	af ec       	ldi	r26, 0xCF	; 207
     95e:	b7 e0       	ldi	r27, 0x07	; 7
     960:	11 97       	sbiw	r26, 0x01	; 1
     962:	f1 f7       	brne	.-4      	; 0x960 <LCD_vinit+0xb4>
     964:	00 c0       	rjmp	.+0      	; 0x966 <LCD_vinit+0xba>
     966:	00 00       	nop
 _delay_ms(1);
 //#endif
}
     968:	08 95       	ret

0000096a <LCD_vsend_char>:
	//#endif
}


void LCD_vsend_char(char data)
{
     96a:	cf 93       	push	r28
     96c:	c8 2f       	mov	r28, r24
	DIO_write_port('A',data);
	DIO_write('B',RS,1);// data reg
	send_falling_edge();

	#elif defined four_bits_mode*/
	write_high_nibble('A',data>>4);
     96e:	68 2f       	mov	r22, r24
     970:	62 95       	swap	r22
     972:	6f 70       	andi	r22, 0x0F	; 15
     974:	81 e4       	ldi	r24, 0x41	; 65
     976:	0e 94 53 03 	call	0x6a6	; 0x6a6 <write_high_nibble>
	DIO_vwrite('B',RS,1);
     97a:	82 e4       	ldi	r24, 0x42	; 66
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	41 e0       	ldi	r20, 0x01	; 1
     980:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	send_falling_edge();
     984:	0e 94 1d 04 	call	0x83a	; 0x83a <send_falling_edge>
	
	write_high_nibble('A',data);
     988:	81 e4       	ldi	r24, 0x41	; 65
     98a:	6c 2f       	mov	r22, r28
     98c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <write_high_nibble>
	DIO_vwrite('B',RS,1);
     990:	82 e4       	ldi	r24, 0x42	; 66
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	41 e0       	ldi	r20, 0x01	; 1
     996:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	send_falling_edge();
     99a:	0e 94 1d 04 	call	0x83a	; 0x83a <send_falling_edge>
     99e:	8f ec       	ldi	r24, 0xCF	; 207
     9a0:	97 e0       	ldi	r25, 0x07	; 7
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <LCD_vsend_char+0x38>
     9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <LCD_vsend_char+0x3e>
     9a8:	00 00       	nop
	
	_delay_ms(1);
	//#endif
}
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <LCD_vsend_string>:

void LCD_vsend_string(char *data)
{
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	ec 01       	movw	r28, r24
	while((*data)!='\0')
     9b4:	88 81       	ld	r24, Y
     9b6:	88 23       	and	r24, r24
     9b8:	31 f0       	breq	.+12     	; 0x9c6 <LCD_vsend_string+0x18>
	
	_delay_ms(1);
	//#endif
}

void LCD_vsend_string(char *data)
     9ba:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vsend_char(*data);
     9bc:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vsend_char>
	//#endif
}

void LCD_vsend_string(char *data)
{
	while((*data)!='\0')
     9c0:	89 91       	ld	r24, Y+
     9c2:	88 23       	and	r24, r24
     9c4:	d9 f7       	brne	.-10     	; 0x9bc <LCD_vsend_string+0xe>
	{
		LCD_vsend_char(*data);
		data++;
	}
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <LCD_clearscreen>:


void LCD_clearscreen()
{
	LCD_vsend_cmd(CLR_SCREEN);//0x01
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	0e 94 34 04 	call	0x868	; 0x868 <LCD_vsend_cmd>
     9d2:	8f e1       	ldi	r24, 0x1F	; 31
     9d4:	9e e4       	ldi	r25, 0x4E	; 78
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	f1 f7       	brne	.-4      	; 0x9d6 <LCD_clearscreen+0xa>
     9da:	00 c0       	rjmp	.+0      	; 0x9dc <LCD_clearscreen+0x10>
     9dc:	00 00       	nop
	_delay_ms(10);
}
     9de:	08 95       	ret

000009e0 <LCD_movecursor>:

void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row >    2 || row     <  1  || coloumn > 16 || coloumn<1)
     9e0:	28 2f       	mov	r18, r24
     9e2:	21 50       	subi	r18, 0x01	; 1
     9e4:	22 30       	cpi	r18, 0x02	; 2
     9e6:	70 f4       	brcc	.+28     	; 0xa04 <LCD_movecursor+0x24>
     9e8:	61 31       	cpi	r22, 0x11	; 17
     9ea:	70 f4       	brcc	.+28     	; 0xa08 <LCD_movecursor+0x28>
     9ec:	66 23       	and	r22, r22
     9ee:	71 f0       	breq	.+28     	; 0xa0c <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	
	else if(row==1)
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	19 f4       	brne	.+6      	; 0x9fa <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
     9f4:	96 2f       	mov	r25, r22
     9f6:	91 58       	subi	r25, 0x81	; 129
     9f8:	0a c0       	rjmp	.+20     	; 0xa0e <LCD_movecursor+0x2e>
	}
	else if (row==2)
     9fa:	82 30       	cpi	r24, 0x02	; 2
     9fc:	41 f4       	brne	.+16     	; 0xa0e <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
     9fe:	96 2f       	mov	r25, r22
     a00:	91 54       	subi	r25, 0x41	; 65
     a02:	05 c0       	rjmp	.+10     	; 0xa0e <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row >    2 || row     <  1  || coloumn > 16 || coloumn<1)
	{
		data=0x80;
     a04:	90 e8       	ldi	r25, 0x80	; 128
     a06:	03 c0       	rjmp	.+6      	; 0xa0e <LCD_movecursor+0x2e>
     a08:	90 e8       	ldi	r25, 0x80	; 128
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <LCD_movecursor+0x2e>
     a0c:	90 e8       	ldi	r25, 0x80	; 128
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	
	LCD_vsend_cmd(data);
     a0e:	89 2f       	mov	r24, r25
     a10:	0e 94 34 04 	call	0x868	; 0x868 <LCD_vsend_cmd>
     a14:	8f ec       	ldi	r24, 0xCF	; 207
     a16:	97 e0       	ldi	r25, 0x07	; 7
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <LCD_movecursor+0x38>
     a1c:	00 c0       	rjmp	.+0      	; 0xa1e <LCD_movecursor+0x3e>
     a1e:	00 00       	nop
	_delay_ms(1);
}
     a20:	08 95       	ret

00000a22 <main>:

char arr[4];
char arrclo[4];

int main(void)
{ 
     a22:	2f 92       	push	r2
     a24:	3f 92       	push	r3
     a26:	4f 92       	push	r4
     a28:	5f 92       	push	r5
     a2a:	6f 92       	push	r6
     a2c:	7f 92       	push	r7
     a2e:	8f 92       	push	r8
     a30:	9f 92       	push	r9
     a32:	af 92       	push	r10
     a34:	bf 92       	push	r11
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	00 d0       	rcall	.+0      	; 0xa48 <main+0x26>
     a48:	0f 92       	push	r0
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
		keypad_vinit();	
     a4e:	0e 94 8a 03 	call	0x714	; 0x714 <keypad_vinit>
	LCD_vinit();
     a52:	0e 94 56 04 	call	0x8ac	; 0x8ac <LCD_vinit>

		SET_BIT(DDRD,5);
     a56:	8d 9a       	sbi	0x11, 5	; 17
		SET_BIT(DDRD,6);
     a58:	8e 9a       	sbi	0x11, 6	; 17


	
	
	
	if(eeprom_read(eeprom_status_location)==unprogrammed ){
     a5a:	80 e2       	ldi	r24, 0x20	; 32
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_read>
     a62:	8f 3f       	cpi	r24, 0xFF	; 255
     a64:	89 f5       	brne	.+98     	; 0xac8 <main+0xa6>
		LCD_vsend_string("Set Pass:");
     a66:	80 e7       	ldi	r24, 0x70	; 112
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCD_vsend_string>
     a6e:	0f 2e       	mov	r0, r31
     a70:	f1 e2       	ldi	r31, 0x21	; 33
     a72:	ef 2e       	mov	r14, r31
     a74:	ff 24       	eor	r15, r15
     a76:	f0 2d       	mov	r31, r0
		for (i=0;i<=3;i++)
		{
		
		do{
			value=keypad_u8check_press();
     a78:	0e 94 c7 03 	call	0x78e	; 0x78e <keypad_u8check_press>
     a7c:	18 2f       	mov	r17, r24
			
		}while(value==unprogrammed);
     a7e:	8f 3f       	cpi	r24, 0xFF	; 255
     a80:	d9 f3       	breq	.-10     	; 0xa78 <main+0x56>
		
		LCD_vsend_char(value);
     a82:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vsend_char>
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	94 e3       	ldi	r25, 0x34	; 52
     a8a:	ac e0       	ldi	r26, 0x0C	; 12
     a8c:	81 50       	subi	r24, 0x01	; 1
     a8e:	90 40       	sbci	r25, 0x00	; 0
     a90:	a0 40       	sbci	r26, 0x00	; 0
     a92:	e1 f7       	brne	.-8      	; 0xa8c <main+0x6a>
     a94:	00 c0       	rjmp	.+0      	; 0xa96 <main+0x74>
     a96:	00 00       	nop
#define unprogrammed 0xff

char arr[4];
char arrclo[4];

int main(void)
     a98:	6e 2d       	mov	r22, r14
     a9a:	67 51       	subi	r22, 0x17	; 23
			
		}while(value==unprogrammed);
		
		LCD_vsend_char(value);
		_delay_ms(500);
		LCD_movecursor(1,10+i);
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_movecursor>
		LCD_vsend_char('*');
     aa2:	8a e2       	ldi	r24, 0x2A	; 42
     aa4:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vsend_char>
	
		eeprom_write(eeprom_password_location1+i,value);
     aa8:	c7 01       	movw	r24, r14
     aaa:	61 2f       	mov	r22, r17
     aac:	0e 94 7d 03 	call	0x6fa	; 0x6fa <eeprom_write>
     ab0:	08 94       	sec
     ab2:	e1 1c       	adc	r14, r1
     ab4:	f1 1c       	adc	r15, r1
	
	
	
	if(eeprom_read(eeprom_status_location)==unprogrammed ){
		LCD_vsend_string("Set Pass:");
		for (i=0;i<=3;i++)
     ab6:	95 e2       	ldi	r25, 0x25	; 37
     ab8:	e9 16       	cp	r14, r25
     aba:	f1 04       	cpc	r15, r1
     abc:	e9 f6       	brne	.-70     	; 0xa78 <main+0x56>
		LCD_vsend_char('*');
	
		eeprom_write(eeprom_password_location1+i,value);
	}
	
eeprom_write(eeprom_status_location,0x00);
     abe:	80 e2       	ldi	r24, 0x20	; 32
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <eeprom_write>
	
//Set password lock



if(eeprom_read(eeprom_status_locationclo)==unprogrammed ){
     ac8:	85 e2       	ldi	r24, 0x25	; 37
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_read>
     ad0:	8f 3f       	cpi	r24, 0xFF	; 255
     ad2:	a9 f5       	brne	.+106    	; 0xb3e <main+0x11c>
	LCD_movecursor(2,1);
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_movecursor>
	LCD_vsend_string("Set Lock:");
     adc:	8a e7       	ldi	r24, 0x7A	; 122
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCD_vsend_string>
     ae4:	0f 2e       	mov	r0, r31
     ae6:	f6 e2       	ldi	r31, 0x26	; 38
     ae8:	ef 2e       	mov	r14, r31
     aea:	ff 24       	eor	r15, r15
     aec:	f0 2d       	mov	r31, r0
	for (i=0;i<=3;i++)
	{
		
		do{
			lock=keypad_u8check_press();
     aee:	0e 94 c7 03 	call	0x78e	; 0x78e <keypad_u8check_press>
     af2:	18 2f       	mov	r17, r24
			
		}while(lock==unprogrammed);
     af4:	8f 3f       	cpi	r24, 0xFF	; 255
     af6:	d9 f3       	breq	.-10     	; 0xaee <main+0xcc>
		
		LCD_vsend_char(lock);
     af8:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vsend_char>
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	94 e3       	ldi	r25, 0x34	; 52
     b00:	ac e0       	ldi	r26, 0x0C	; 12
     b02:	81 50       	subi	r24, 0x01	; 1
     b04:	90 40       	sbci	r25, 0x00	; 0
     b06:	a0 40       	sbci	r26, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <main+0xe0>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <main+0xea>
     b0c:	00 00       	nop
#define unprogrammed 0xff

char arr[4];
char arrclo[4];

int main(void)
     b0e:	6e 2d       	mov	r22, r14
     b10:	6c 51       	subi	r22, 0x1C	; 28
			
		}while(lock==unprogrammed);
		
		LCD_vsend_char(lock);
		_delay_ms(500);
		LCD_movecursor(2,10+i);
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_movecursor>
		LCD_vsend_char('*');
     b18:	8a e2       	ldi	r24, 0x2A	; 42
     b1a:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vsend_char>
		
		eeprom_write(eeprom_password_locationclo1+i,lock);
     b1e:	c7 01       	movw	r24, r14
     b20:	61 2f       	mov	r22, r17
     b22:	0e 94 7d 03 	call	0x6fa	; 0x6fa <eeprom_write>
     b26:	08 94       	sec
     b28:	e1 1c       	adc	r14, r1
     b2a:	f1 1c       	adc	r15, r1


if(eeprom_read(eeprom_status_locationclo)==unprogrammed ){
	LCD_movecursor(2,1);
	LCD_vsend_string("Set Lock:");
	for (i=0;i<=3;i++)
     b2c:	9a e2       	ldi	r25, 0x2A	; 42
     b2e:	e9 16       	cp	r14, r25
     b30:	f1 04       	cpc	r15, r1
     b32:	e9 f6       	brne	.-70     	; 0xaee <main+0xcc>
		LCD_vsend_char('*');
		
		eeprom_write(eeprom_password_locationclo1+i,lock);
	}
	
	eeprom_write(eeprom_status_locationclo,0x00);
     b34:	85 e2       	ldi	r24, 0x25	; 37
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <eeprom_write>



if(eeprom_read(eeprom_status_locationclo)==unprogrammed ){
	LCD_movecursor(2,1);
	LCD_vsend_string("Set Lock:");
     b3e:	0f 2e       	mov	r0, r31
     b40:	f1 e3       	ldi	r31, 0x31	; 49
     b42:	ef 2e       	mov	r14, r31
     b44:	f0 2d       	mov	r31, r0
    while(flag==0)
    {
        //TODO:: Please write your application code 
		
		
		arr[0]=arr[1]=arr[2]=arr[3]=unprogrammed;
     b46:	0f 2e       	mov	r0, r31
     b48:	fd ee       	ldi	r31, 0xED	; 237
     b4a:	cf 2e       	mov	r12, r31
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	df 2e       	mov	r13, r31
     b50:	f0 2d       	mov	r31, r0
     b52:	0f ef       	ldi	r16, 0xFF	; 255
     b54:	46 01       	movw	r8, r12
     b56:	08 94       	sec
     b58:	81 08       	sbc	r8, r1
     b5a:	91 08       	sbc	r9, r1
     b5c:	0f 2e       	mov	r0, r31
     b5e:	fe ef       	ldi	r31, 0xFE	; 254
     b60:	6f 2e       	mov	r6, r31
     b62:	ff ef       	ldi	r31, 0xFF	; 255
     b64:	7f 2e       	mov	r7, r31
     b66:	f0 2d       	mov	r31, r0
     b68:	6c 0c       	add	r6, r12
     b6a:	7d 1c       	adc	r7, r13
     b6c:	0f 2e       	mov	r0, r31
     b6e:	fd ef       	ldi	r31, 0xFD	; 253
     b70:	af 2e       	mov	r10, r31
     b72:	ff ef       	ldi	r31, 0xFF	; 255
     b74:	bf 2e       	mov	r11, r31
     b76:	f0 2d       	mov	r31, r0
     b78:	ac 0c       	add	r10, r12
     b7a:	bd 1c       	adc	r11, r13
		LCD_clearscreen();
		LCD_vsend_string("Check Pass:");
     b7c:	0f 2e       	mov	r0, r31
     b7e:	f4 e8       	ldi	r31, 0x84	; 132
     b80:	4f 2e       	mov	r4, r31
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	5f 2e       	mov	r5, r31
     b86:	f0 2d       	mov	r31, r0
     b88:	fa 2c       	mov	r15, r10
     b8a:	b9 82       	std	Y+1, r11	; 0x01
			LCD_movecursor(1,12+i);
			LCD_vsend_char('*');
			
		}	
		
		if ((eeprom_read(eeprom_password_location1)==arr[0] && eeprom_read(eeprom_password_location2)==arr[1] &&
     b8c:	0f 2e       	mov	r0, r31
     b8e:	fa ee       	ldi	r31, 0xEA	; 234
     b90:	2f 2e       	mov	r2, r31
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	3f 2e       	mov	r3, r31
     b96:	f0 2d       	mov	r31, r0
    while(flag==0)
    {
        //TODO:: Please write your application code 
		
		
		arr[0]=arr[1]=arr[2]=arr[3]=unprogrammed;
     b98:	d6 01       	movw	r26, r12
     b9a:	0c 93       	st	X, r16
     b9c:	f4 01       	movw	r30, r8
     b9e:	00 83       	st	Z, r16
     ba0:	d3 01       	movw	r26, r6
     ba2:	0c 93       	st	X, r16
     ba4:	f5 01       	movw	r30, r10
     ba6:	00 83       	st	Z, r16
		LCD_clearscreen();
     ba8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LCD_clearscreen>
		LCD_vsend_string("Check Pass:");
     bac:	c2 01       	movw	r24, r4
     bae:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCD_vsend_string>
     bb2:	fa 82       	std	Y+2, r15	; 0x02
     bb4:	f9 81       	ldd	r31, Y+1	; 0x01
     bb6:	fb 83       	std	Y+3, r31	; 0x03
     bb8:	1c e0       	ldi	r17, 0x0C	; 12
		
		for(i=0;i<=3;i++){
			
			do 
			{
				arr[i]=keypad_u8check_press();
     bba:	0e 94 c7 03 	call	0x78e	; 0x78e <keypad_u8check_press>
     bbe:	aa 81       	ldd	r26, Y+2	; 0x02
     bc0:	bb 81       	ldd	r27, Y+3	; 0x03
     bc2:	8c 93       	st	X, r24
				
			} while (arr[i]== unprogrammed);
     bc4:	8f 3f       	cpi	r24, 0xFF	; 255
     bc6:	c9 f3       	breq	.-14     	; 0xbba <main+0x198>
			
			LCD_vsend_char(arr[i]);
     bc8:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vsend_char>
     bcc:	8f ef       	ldi	r24, 0xFF	; 255
     bce:	94 e3       	ldi	r25, 0x34	; 52
     bd0:	ac e0       	ldi	r26, 0x0C	; 12
     bd2:	81 50       	subi	r24, 0x01	; 1
     bd4:	90 40       	sbci	r25, 0x00	; 0
     bd6:	a0 40       	sbci	r26, 0x00	; 0
     bd8:	e1 f7       	brne	.-8      	; 0xbd2 <main+0x1b0>
     bda:	00 c0       	rjmp	.+0      	; 0xbdc <main+0x1ba>
     bdc:	00 00       	nop
			_delay_ms(500);
			LCD_movecursor(1,12+i);
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	61 2f       	mov	r22, r17
     be2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_movecursor>
			LCD_vsend_char('*');
     be6:	8a e2       	ldi	r24, 0x2A	; 42
     be8:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vsend_char>
     bec:	1f 5f       	subi	r17, 0xFF	; 255
     bee:	aa 81       	ldd	r26, Y+2	; 0x02
     bf0:	bb 81       	ldd	r27, Y+3	; 0x03
     bf2:	11 96       	adiw	r26, 0x01	; 1
     bf4:	bb 83       	std	Y+3, r27	; 0x03
     bf6:	aa 83       	std	Y+2, r26	; 0x02
		
		arr[0]=arr[1]=arr[2]=arr[3]=unprogrammed;
		LCD_clearscreen();
		LCD_vsend_string("Check Pass:");
		
		for(i=0;i<=3;i++){
     bf8:	10 31       	cpi	r17, 0x10	; 16
     bfa:	f9 f6       	brne	.-66     	; 0xbba <main+0x198>
			LCD_movecursor(1,12+i);
			LCD_vsend_char('*');
			
		}	
		
		if ((eeprom_read(eeprom_password_location1)==arr[0] && eeprom_read(eeprom_password_location2)==arr[1] &&
     bfc:	81 e2       	ldi	r24, 0x21	; 33
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_read>
     c04:	f1 01       	movw	r30, r2
     c06:	90 81       	ld	r25, Z
     c08:	89 17       	cp	r24, r25
     c0a:	09 f0       	breq	.+2      	; 0xc0e <main+0x1ec>
     c0c:	45 c0       	rjmp	.+138    	; 0xc98 <main+0x276>
     c0e:	82 e2       	ldi	r24, 0x22	; 34
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_read>
     c16:	ab ee       	ldi	r26, 0xEB	; 235
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	9c 91       	ld	r25, X
     c1c:	89 17       	cp	r24, r25
     c1e:	e1 f5       	brne	.+120    	; 0xc98 <main+0x276>
		eeprom_read(eeprom_password_location3)==arr[2]&& eeprom_read(eeprom_password_location4)==arr[3]))
     c20:	83 e2       	ldi	r24, 0x23	; 35
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_read>
			LCD_movecursor(1,12+i);
			LCD_vsend_char('*');
			
		}	
		
		if ((eeprom_read(eeprom_password_location1)==arr[0] && eeprom_read(eeprom_password_location2)==arr[1] &&
     c28:	ec ee       	ldi	r30, 0xEC	; 236
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	90 81       	ld	r25, Z
     c2e:	89 17       	cp	r24, r25
     c30:	99 f5       	brne	.+102    	; 0xc98 <main+0x276>
		eeprom_read(eeprom_password_location3)==arr[2]&& eeprom_read(eeprom_password_location4)==arr[3]))
     c32:	84 e2       	ldi	r24, 0x24	; 36
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_read>
     c3a:	d6 01       	movw	r26, r12
     c3c:	9c 91       	ld	r25, X
     c3e:	89 17       	cp	r24, r25
     c40:	59 f5       	brne	.+86     	; 0xc98 <main+0x276>
		{
			LCD_clearscreen();
     c42:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LCD_clearscreen>
			LCD_vsend_string("Right Password");
     c46:	80 e9       	ldi	r24, 0x90	; 144
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCD_vsend_string>
			LCD_movecursor(2,1);
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_movecursor>
			LCD_vsend_string("Safe Opened");
     c56:	8f e9       	ldi	r24, 0x9F	; 159
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCD_vsend_string>
				//timer1_servomotor(1.5);
				//timer1_servomotor(1.5);
				//_delay_ms(5000);
				
				
				SET_BIT(PORTD,5);
     c5e:	95 9a       	sbi	0x12, 5	; 18
     c60:	ef ec       	ldi	r30, 0xCF	; 207
     c62:	f7 e0       	ldi	r31, 0x07	; 7
     c64:	31 97       	sbiw	r30, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <main+0x242>
     c68:	00 c0       	rjmp	.+0      	; 0xc6a <main+0x248>
     c6a:	00 00       	nop
				_delay_ms(1);
				
			
				
				CLR_BIT(PORTD,5);
     c6c:	95 98       	cbi	0x12, 5	; 18
				SET_BIT(PORTD,6);
     c6e:	96 9a       	sbi	0x12, 6	; 18
     c70:	8f ef       	ldi	r24, 0xFF	; 255
     c72:	9d e3       	ldi	r25, 0x3D	; 61
     c74:	a9 e4       	ldi	r26, 0x49	; 73
     c76:	81 50       	subi	r24, 0x01	; 1
     c78:	90 40       	sbci	r25, 0x00	; 0
     c7a:	a0 40       	sbci	r26, 0x00	; 0
     c7c:	e1 f7       	brne	.-8      	; 0xc76 <main+0x254>
     c7e:	00 c0       	rjmp	.+0      	; 0xc80 <main+0x25e>
     c80:	00 00       	nop
				_delay_ms(3000);
CLR_BIT(PORTD,6);
     c82:	96 98       	cbi	0x12, 6	; 18
     c84:	8f ef       	ldi	r24, 0xFF	; 255
     c86:	99 e6       	ldi	r25, 0x69	; 105
     c88:	a8 e1       	ldi	r26, 0x18	; 24
     c8a:	81 50       	subi	r24, 0x01	; 1
     c8c:	90 40       	sbci	r25, 0x00	; 0
     c8e:	a0 40       	sbci	r26, 0x00	; 0
     c90:	e1 f7       	brne	.-8      	; 0xc8a <main+0x268>
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <main+0x272>
     c94:	00 00       	nop
_delay_ms(1000);
			flag=1;
     c96:	dd c0       	rjmp	.+442    	; 0xe52 <main+0x430>
			
		}else{
			tries=tries-1;
			
			if (tries>0)
     c98:	90 e3       	ldi	r25, 0x30	; 48
     c9a:	e9 16       	cp	r14, r25
     c9c:	61 f1       	breq	.+88     	; 0xcf6 <main+0x2d4>
			{
				LCD_clearscreen();
     c9e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LCD_clearscreen>
				LCD_vsend_string("Wrong Password");
     ca2:	8b ea       	ldi	r24, 0xAB	; 171
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCD_vsend_string>
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	99 e6       	ldi	r25, 0x69	; 105
     cae:	a8 e1       	ldi	r26, 0x18	; 24
     cb0:	81 50       	subi	r24, 0x01	; 1
     cb2:	90 40       	sbci	r25, 0x00	; 0
     cb4:	a0 40       	sbci	r26, 0x00	; 0
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <main+0x28e>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <main+0x298>
     cba:	00 00       	nop
				_delay_ms(1000);
					LCD_clearscreen();
     cbc:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LCD_clearscreen>
					LCD_vsend_string("tries left:");
     cc0:	8a eb       	ldi	r24, 0xBA	; 186
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCD_vsend_string>
					LCD_vsend_char(tries+48);
     cc8:	8e 2d       	mov	r24, r14
     cca:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vsend_char>
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	99 e6       	ldi	r25, 0x69	; 105
     cd2:	a8 e1       	ldi	r26, 0x18	; 24
     cd4:	81 50       	subi	r24, 0x01	; 1
     cd6:	90 40       	sbci	r25, 0x00	; 0
     cd8:	a0 40       	sbci	r26, 0x00	; 0
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <main+0x2b2>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <main+0x2bc>
     cde:	00 00       	nop
     ce0:	8f ef       	ldi	r24, 0xFF	; 255
     ce2:	9d e3       	ldi	r25, 0x3D	; 61
     ce4:	a9 e4       	ldi	r26, 0x49	; 73
     ce6:	81 50       	subi	r24, 0x01	; 1
     ce8:	90 40       	sbci	r25, 0x00	; 0
     cea:	a0 40       	sbci	r26, 0x00	; 0
     cec:	e1 f7       	brne	.-8      	; 0xce6 <main+0x2c4>
     cee:	00 c0       	rjmp	.+0      	; 0xcf0 <main+0x2ce>
     cf0:	00 00       	nop
     cf2:	ea 94       	dec	r14
     cf4:	51 cf       	rjmp	.-350    	; 0xb98 <main+0x176>
					_delay_ms(1000);
			}else{
					LCD_clearscreen();
     cf6:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LCD_clearscreen>
					LCD_vsend_string("Wrong Password");
     cfa:	8b ea       	ldi	r24, 0xAB	; 171
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCD_vsend_string>
					LCD_movecursor(2,1);
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	61 e0       	ldi	r22, 0x01	; 1
     d06:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_movecursor>
			LCD_vsend_string("Safe Closed");
     d0a:	86 ec       	ldi	r24, 0xC6	; 198
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCD_vsend_string>
     d12:	9f c0       	rjmp	.+318    	; 0xe52 <main+0x430>
		}    
		
//Close the safe	
		
while(close==0){		
		arrclo[0]=arrclo[1]=arrclo[2]=arrclo[3]=unprogrammed;
     d14:	d7 01       	movw	r26, r14
     d16:	0c 93       	st	X, r16
     d18:	f5 01       	movw	r30, r10
     d1a:	00 83       	st	Z, r16
     d1c:	d4 01       	movw	r26, r8
     d1e:	0c 93       	st	X, r16
     d20:	f6 01       	movw	r30, r12
     d22:	00 83       	st	Z, r16
		LCD_clearscreen();
     d24:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LCD_clearscreen>
		LCD_vsend_string("Close safe:");
     d28:	c3 01       	movw	r24, r6
     d2a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCD_vsend_string>
     d2e:	3a 82       	std	Y+2, r3	; 0x02
     d30:	2b 82       	std	Y+3, r2	; 0x03
     d32:	1c e0       	ldi	r17, 0x0C	; 12
		
		for(i=0;i<=3;i++){
			
			do
			{
				arrclo[i]=keypad_u8check_press();
     d34:	0e 94 c7 03 	call	0x78e	; 0x78e <keypad_u8check_press>
     d38:	aa 81       	ldd	r26, Y+2	; 0x02
     d3a:	bb 81       	ldd	r27, Y+3	; 0x03
     d3c:	8c 93       	st	X, r24
				
			} while (arrclo[i]== unprogrammed);
     d3e:	8f 3f       	cpi	r24, 0xFF	; 255
     d40:	c9 f3       	breq	.-14     	; 0xd34 <main+0x312>
			
			LCD_vsend_char(arrclo[i]);
     d42:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vsend_char>
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	94 e3       	ldi	r25, 0x34	; 52
     d4a:	ac e0       	ldi	r26, 0x0C	; 12
     d4c:	81 50       	subi	r24, 0x01	; 1
     d4e:	90 40       	sbci	r25, 0x00	; 0
     d50:	a0 40       	sbci	r26, 0x00	; 0
     d52:	e1 f7       	brne	.-8      	; 0xd4c <main+0x32a>
     d54:	00 c0       	rjmp	.+0      	; 0xd56 <main+0x334>
     d56:	00 00       	nop
			_delay_ms(500);
			LCD_movecursor(1,12+i);
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	61 2f       	mov	r22, r17
     d5c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_movecursor>
			LCD_vsend_char('*');
     d60:	8a e2       	ldi	r24, 0x2A	; 42
     d62:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_vsend_char>
     d66:	1f 5f       	subi	r17, 0xFF	; 255
     d68:	aa 81       	ldd	r26, Y+2	; 0x02
     d6a:	bb 81       	ldd	r27, Y+3	; 0x03
     d6c:	11 96       	adiw	r26, 0x01	; 1
     d6e:	bb 83       	std	Y+3, r27	; 0x03
     d70:	aa 83       	std	Y+2, r26	; 0x02
while(close==0){		
		arrclo[0]=arrclo[1]=arrclo[2]=arrclo[3]=unprogrammed;
		LCD_clearscreen();
		LCD_vsend_string("Close safe:");
		
		for(i=0;i<=3;i++){
     d72:	10 31       	cpi	r17, 0x10	; 16
     d74:	f9 f6       	brne	.-66     	; 0xd34 <main+0x312>
			LCD_movecursor(1,12+i);
			LCD_vsend_char('*');
			
		}
		
		if ((eeprom_read(eeprom_password_location1)==arr[0] && eeprom_read(eeprom_password_location2)==arr[1] &&
     d76:	81 e2       	ldi	r24, 0x21	; 33
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_read>
     d7e:	f2 01       	movw	r30, r4
     d80:	90 81       	ld	r25, Z
     d82:	89 17       	cp	r24, r25
     d84:	39 f6       	brne	.-114    	; 0xd14 <main+0x2f2>
     d86:	82 e2       	ldi	r24, 0x22	; 34
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_read>
     d8e:	ab ee       	ldi	r26, 0xEB	; 235
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	9c 91       	ld	r25, X
     d94:	89 17       	cp	r24, r25
     d96:	09 f0       	breq	.+2      	; 0xd9a <main+0x378>
     d98:	bd cf       	rjmp	.-134    	; 0xd14 <main+0x2f2>
		eeprom_read(eeprom_password_location3)==arr[2]&& eeprom_read(eeprom_password_location4)==arr[3]))
     d9a:	83 e2       	ldi	r24, 0x23	; 35
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_read>
			LCD_movecursor(1,12+i);
			LCD_vsend_char('*');
			
		}
		
		if ((eeprom_read(eeprom_password_location1)==arr[0] && eeprom_read(eeprom_password_location2)==arr[1] &&
     da2:	ec ee       	ldi	r30, 0xEC	; 236
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	90 81       	ld	r25, Z
     da8:	89 17       	cp	r24, r25
     daa:	a9 f5       	brne	.+106    	; 0xe16 <main+0x3f4>
		eeprom_read(eeprom_password_location3)==arr[2]&& eeprom_read(eeprom_password_location4)==arr[3]))
     dac:	84 e2       	ldi	r24, 0x24	; 36
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 85 03 	call	0x70a	; 0x70a <eeprom_read>
     db4:	ad ee       	ldi	r26, 0xED	; 237
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	9c 91       	ld	r25, X
     dba:	89 17       	cp	r24, r25
     dbc:	71 f5       	brne	.+92     	; 0xe1a <main+0x3f8>
		{
			LCD_clearscreen();
     dbe:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LCD_clearscreen>
			LCD_vsend_string("Right Password");
     dc2:	80 e9       	ldi	r24, 0x90	; 144
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCD_vsend_string>
			LCD_movecursor(2,1);
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_movecursor>
			LCD_vsend_string("Safe Close");
     dd2:	8e ed       	ldi	r24, 0xDE	; 222
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCD_vsend_string>
				
			//timer1_servomotor(1);
			//_delay_ms(5000);
				
				
				SET_BIT(PORTD,5);
     dda:	95 9a       	sbi	0x12, 5	; 18
     ddc:	ef e9       	ldi	r30, 0x9F	; 159
     dde:	ff e0       	ldi	r31, 0x0F	; 15
     de0:	31 97       	sbiw	r30, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <main+0x3be>
     de4:	00 c0       	rjmp	.+0      	; 0xde6 <main+0x3c4>
     de6:	00 00       	nop
				_delay_ms(2);
				CLR_BIT(PORTD,5);
     de8:	95 98       	cbi	0x12, 5	; 18
				
				SET_BIT(PORTD,6);
     dea:	96 9a       	sbi	0x12, 6	; 18
     dec:	8f ef       	ldi	r24, 0xFF	; 255
     dee:	9d e3       	ldi	r25, 0x3D	; 61
     df0:	a9 e4       	ldi	r26, 0x49	; 73
     df2:	81 50       	subi	r24, 0x01	; 1
     df4:	90 40       	sbci	r25, 0x00	; 0
     df6:	a0 40       	sbci	r26, 0x00	; 0
     df8:	e1 f7       	brne	.-8      	; 0xdf2 <main+0x3d0>
     dfa:	00 c0       	rjmp	.+0      	; 0xdfc <main+0x3da>
     dfc:	00 00       	nop
				_delay_ms(3000);
				CLR_BIT(PORTD,6);
     dfe:	96 98       	cbi	0x12, 6	; 18
     e00:	8f ef       	ldi	r24, 0xFF	; 255
     e02:	99 e6       	ldi	r25, 0x69	; 105
     e04:	a8 e1       	ldi	r26, 0x18	; 24
     e06:	81 50       	subi	r24, 0x01	; 1
     e08:	90 40       	sbci	r25, 0x00	; 0
     e0a:	a0 40       	sbci	r26, 0x00	; 0
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <main+0x3e4>
     e0e:	00 c0       	rjmp	.+0      	; 0xe10 <main+0x3ee>
     e10:	00 00       	nop
				_delay_ms(1000);
			close=1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <main+0x3fa>
			LCD_movecursor(1,12+i);
			LCD_vsend_char('*');
			
		}
		
		if ((eeprom_read(eeprom_password_location1)==arr[0] && eeprom_read(eeprom_password_location2)==arr[1] &&
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <main+0x3fa>
		eeprom_read(eeprom_password_location3)==arr[2]&& eeprom_read(eeprom_password_location4)==arr[3]))
     e1a:	80 e0       	ldi	r24, 0x00	; 0
		
		}    
		
//Close the safe	
		
while(close==0){		
     e1c:	88 23       	and	r24, r24
     e1e:	09 f4       	brne	.+2      	; 0xe22 <main+0x400>
     e20:	79 cf       	rjmp	.-270    	; 0xd14 <main+0x2f2>
		}
		
		
		}		
		
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	bf 90       	pop	r11
     e3e:	af 90       	pop	r10
     e40:	9f 90       	pop	r9
     e42:	8f 90       	pop	r8
     e44:	7f 90       	pop	r7
     e46:	6f 90       	pop	r6
     e48:	5f 90       	pop	r5
     e4a:	4f 90       	pop	r4
     e4c:	3f 90       	pop	r3
     e4e:	2f 90       	pop	r2
     e50:	08 95       	ret
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	9d e3       	ldi	r25, 0x3D	; 61
     e56:	a9 e4       	ldi	r26, 0x49	; 73
     e58:	81 50       	subi	r24, 0x01	; 1
     e5a:	90 40       	sbci	r25, 0x00	; 0
     e5c:	a0 40       	sbci	r26, 0x00	; 0
     e5e:	e1 f7       	brne	.-8      	; 0xe58 <main+0x436>
     e60:	00 c0       	rjmp	.+0      	; 0xe62 <main+0x440>
     e62:	00 00       	nop
		}    
		
//Close the safe	
		
while(close==0){		
		arrclo[0]=arrclo[1]=arrclo[2]=arrclo[3]=unprogrammed;
     e64:	0f 2e       	mov	r0, r31
     e66:	f1 ef       	ldi	r31, 0xF1	; 241
     e68:	ef 2e       	mov	r14, r31
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	ff 2e       	mov	r15, r31
     e6e:	f0 2d       	mov	r31, r0
     e70:	0f ef       	ldi	r16, 0xFF	; 255
     e72:	57 01       	movw	r10, r14
     e74:	08 94       	sec
     e76:	a1 08       	sbc	r10, r1
     e78:	b1 08       	sbc	r11, r1
     e7a:	0f 2e       	mov	r0, r31
     e7c:	fe ef       	ldi	r31, 0xFE	; 254
     e7e:	8f 2e       	mov	r8, r31
     e80:	ff ef       	ldi	r31, 0xFF	; 255
     e82:	9f 2e       	mov	r9, r31
     e84:	f0 2d       	mov	r31, r0
     e86:	8e 0c       	add	r8, r14
     e88:	9f 1c       	adc	r9, r15
     e8a:	0f 2e       	mov	r0, r31
     e8c:	fd ef       	ldi	r31, 0xFD	; 253
     e8e:	cf 2e       	mov	r12, r31
     e90:	ff ef       	ldi	r31, 0xFF	; 255
     e92:	df 2e       	mov	r13, r31
     e94:	f0 2d       	mov	r31, r0
     e96:	ce 0c       	add	r12, r14
     e98:	df 1c       	adc	r13, r15
		LCD_clearscreen();
		LCD_vsend_string("Close safe:");
     e9a:	0f 2e       	mov	r0, r31
     e9c:	f2 ed       	ldi	r31, 0xD2	; 210
     e9e:	6f 2e       	mov	r6, r31
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	7f 2e       	mov	r7, r31
     ea4:	f0 2d       	mov	r31, r0
     ea6:	3c 2c       	mov	r3, r12
     ea8:	2d 2c       	mov	r2, r13
			LCD_movecursor(1,12+i);
			LCD_vsend_char('*');
			
		}
		
		if ((eeprom_read(eeprom_password_location1)==arr[0] && eeprom_read(eeprom_password_location2)==arr[1] &&
     eaa:	0f 2e       	mov	r0, r31
     eac:	fa ee       	ldi	r31, 0xEA	; 234
     eae:	4f 2e       	mov	r4, r31
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	5f 2e       	mov	r5, r31
     eb4:	f0 2d       	mov	r31, r0
     eb6:	2e cf       	rjmp	.-420    	; 0xd14 <main+0x2f2>

00000eb8 <timer_CTC_init_interrupt>:
#include <avr/io.h>
#include <avr/interrupt.h>
void timer_CTC_init_interrupt(void)
{
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
     eb8:	83 b7       	in	r24, 0x33	; 51
     eba:	88 60       	ori	r24, 0x08	; 8
     ebc:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=80;
     ebe:	80 e5       	ldi	r24, 0x50	; 80
     ec0:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
     ec2:	83 b7       	in	r24, 0x33	; 51
     ec4:	81 60       	ori	r24, 0x01	; 1
     ec6:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
     ec8:	83 b7       	in	r24, 0x33	; 51
     eca:	84 60       	ori	r24, 0x04	; 4
     ecc:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	sei();
     ece:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
     ed0:	89 b7       	in	r24, 0x39	; 57
     ed2:	82 60       	ori	r24, 0x02	; 2
     ed4:	89 bf       	out	0x39, r24	; 57
}
     ed6:	08 95       	ret

00000ed8 <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     ed8:	bb 9a       	sbi	0x17, 3	; 23
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
     eda:	83 b7       	in	r24, 0x33	; 51
     edc:	88 60       	ori	r24, 0x08	; 8
     ede:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
     ee0:	80 e4       	ldi	r24, 0x40	; 64
     ee2:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
     ee4:	83 b7       	in	r24, 0x33	; 51
     ee6:	81 60       	ori	r24, 0x01	; 1
     ee8:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
     eea:	83 b7       	in	r24, 0x33	; 51
     eec:	84 60       	ori	r24, 0x04	; 4
     eee:	83 bf       	out	0x33, r24	; 51
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
     ef0:	83 b7       	in	r24, 0x33	; 51
     ef2:	80 61       	ori	r24, 0x10	; 16
     ef4:	83 bf       	out	0x33, r24	; 51
}
     ef6:	08 95       	ret

00000ef8 <timer1_wave_fastPWM>:

void timer1_wave_fastPWM(double value)
{//f_cpu 1000000
	/* set OC1A as output pin */
	SET_BIT(DDRD,5);
     ef8:	8d 9a       	sbi	0x11, 5	; 17
	/* select fast PWM mode*/
	SET_BIT(TCCR1A,WGM11);
     efa:	2f b5       	in	r18, 0x2f	; 47
     efc:	22 60       	ori	r18, 0x02	; 2
     efe:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
     f00:	2e b5       	in	r18, 0x2e	; 46
     f02:	28 60       	ori	r18, 0x08	; 8
     f04:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
     f06:	2e b5       	in	r18, 0x2e	; 46
     f08:	20 61       	ori	r18, 0x10	; 16
     f0a:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1A,ICR1 */
	OCR1A=value*1000;
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	4a e7       	ldi	r20, 0x7A	; 122
     f12:	54 e4       	ldi	r21, 0x44	; 68
     f14:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     f18:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fixunssfsi>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	9b bd       	out	0x2b, r25	; 43
     f22:	8a bd       	out	0x2a, r24	; 42
	ICR1=19999;
     f24:	8f e1       	ldi	r24, 0x1F	; 31
     f26:	9e e4       	ldi	r25, 0x4E	; 78
     f28:	97 bd       	out	0x27, r25	; 39
     f2a:	86 bd       	out	0x26, r24	; 38
	/* select timer clock, no prescaling */
	SET_BIT(TCCR1B,CS10);
     f2c:	8e b5       	in	r24, 0x2e	; 46
     f2e:	81 60       	ori	r24, 0x01	; 1
     f30:	8e bd       	out	0x2e, r24	; 46
	/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1A1);
     f32:	8f b5       	in	r24, 0x2f	; 47
     f34:	80 68       	ori	r24, 0x80	; 128
     f36:	8f bd       	out	0x2f, r24	; 47
}
     f38:	08 95       	ret

00000f3a <timer1_servomotor>:

void timer1_servomotor(double speed)
{//f_cpu 8000000
	
		/* set OC1A as output pin */
		SET_BIT(DDRD,5);
     f3a:	8d 9a       	sbi	0x11, 5	; 17
	
	// Set Timer1 to Fast PWM mode, 16-bit
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
     f3c:	22 e8       	ldi	r18, 0x82	; 130
     f3e:	2f bd       	out	0x2f, r18	; 47
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);  // Prescaler 8
     f40:	2a e1       	ldi	r18, 0x1A	; 26
     f42:	2e bd       	out	0x2e, r18	; 46

	// Set TOP value for 50Hz PWM (20ms period)
	ICR1 = 19999;  // (8MHz / 8 / 50Hz) - 1
     f44:	2f e1       	ldi	r18, 0x1F	; 31
     f46:	3e e4       	ldi	r19, 0x4E	; 78
     f48:	37 bd       	out	0x27, r19	; 39
     f4a:	26 bd       	out	0x26, r18	; 38

	// Initialize OCR1A to neutral position (1ms pulse)
	OCR1A =speed*1000;  // 1.5ms / (1 / (8MHz / 8)) = 3000
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	4a e7       	ldi	r20, 0x7A	; 122
     f52:	54 e4       	ldi	r21, 0x44	; 68
     f54:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     f58:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	9b bd       	out	0x2b, r25	; 43
     f62:	8a bd       	out	0x2a, r24	; 42
}
     f64:	08 95       	ret

00000f66 <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     f66:	bb 9a       	sbi	0x17, 3	; 23
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
     f68:	83 b7       	in	r24, 0x33	; 51
     f6a:	80 64       	ori	r24, 0x40	; 64
     f6c:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
     f6e:	80 e4       	ldi	r24, 0x40	; 64
     f70:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
     f72:	83 b7       	in	r24, 0x33	; 51
     f74:	81 60       	ori	r24, 0x01	; 1
     f76:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
     f78:	83 b7       	in	r24, 0x33	; 51
     f7a:	84 60       	ori	r24, 0x04	; 4
     f7c:	83 bf       	out	0x33, r24	; 51
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
     f7e:	83 b7       	in	r24, 0x33	; 51
     f80:	80 61       	ori	r24, 0x10	; 16
     f82:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
     f84:	83 b7       	in	r24, 0x33	; 51
     f86:	80 62       	ori	r24, 0x20	; 32
     f88:	83 bf       	out	0x33, r24	; 51
}
     f8a:	08 95       	ret

00000f8c <__fixunssfsi>:
     f8c:	33 d0       	rcall	.+102    	; 0xff4 <__fp_splitA>
     f8e:	88 f0       	brcs	.+34     	; 0xfb2 <__fixunssfsi+0x26>
     f90:	9f 57       	subi	r25, 0x7F	; 127
     f92:	90 f0       	brcs	.+36     	; 0xfb8 <__fixunssfsi+0x2c>
     f94:	b9 2f       	mov	r27, r25
     f96:	99 27       	eor	r25, r25
     f98:	b7 51       	subi	r27, 0x17	; 23
     f9a:	a0 f0       	brcs	.+40     	; 0xfc4 <__fixunssfsi+0x38>
     f9c:	d1 f0       	breq	.+52     	; 0xfd2 <__fixunssfsi+0x46>
     f9e:	66 0f       	add	r22, r22
     fa0:	77 1f       	adc	r23, r23
     fa2:	88 1f       	adc	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	1a f0       	brmi	.+6      	; 0xfae <__fixunssfsi+0x22>
     fa8:	ba 95       	dec	r27
     faa:	c9 f7       	brne	.-14     	; 0xf9e <__fixunssfsi+0x12>
     fac:	12 c0       	rjmp	.+36     	; 0xfd2 <__fixunssfsi+0x46>
     fae:	b1 30       	cpi	r27, 0x01	; 1
     fb0:	81 f0       	breq	.+32     	; 0xfd2 <__fixunssfsi+0x46>
     fb2:	3a d0       	rcall	.+116    	; 0x1028 <__fp_zero>
     fb4:	b1 e0       	ldi	r27, 0x01	; 1
     fb6:	08 95       	ret
     fb8:	37 c0       	rjmp	.+110    	; 0x1028 <__fp_zero>
     fba:	67 2f       	mov	r22, r23
     fbc:	78 2f       	mov	r23, r24
     fbe:	88 27       	eor	r24, r24
     fc0:	b8 5f       	subi	r27, 0xF8	; 248
     fc2:	39 f0       	breq	.+14     	; 0xfd2 <__fixunssfsi+0x46>
     fc4:	b9 3f       	cpi	r27, 0xF9	; 249
     fc6:	cc f3       	brlt	.-14     	; 0xfba <__fixunssfsi+0x2e>
     fc8:	86 95       	lsr	r24
     fca:	77 95       	ror	r23
     fcc:	67 95       	ror	r22
     fce:	b3 95       	inc	r27
     fd0:	d9 f7       	brne	.-10     	; 0xfc8 <__fixunssfsi+0x3c>
     fd2:	3e f4       	brtc	.+14     	; 0xfe2 <__fixunssfsi+0x56>
     fd4:	90 95       	com	r25
     fd6:	80 95       	com	r24
     fd8:	70 95       	com	r23
     fda:	61 95       	neg	r22
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	8f 4f       	sbci	r24, 0xFF	; 255
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	08 95       	ret

00000fe4 <__fp_split3>:
     fe4:	57 fd       	sbrc	r21, 7
     fe6:	90 58       	subi	r25, 0x80	; 128
     fe8:	44 0f       	add	r20, r20
     fea:	55 1f       	adc	r21, r21
     fec:	59 f0       	breq	.+22     	; 0x1004 <__fp_splitA+0x10>
     fee:	5f 3f       	cpi	r21, 0xFF	; 255
     ff0:	71 f0       	breq	.+28     	; 0x100e <__fp_splitA+0x1a>
     ff2:	47 95       	ror	r20

00000ff4 <__fp_splitA>:
     ff4:	88 0f       	add	r24, r24
     ff6:	97 fb       	bst	r25, 7
     ff8:	99 1f       	adc	r25, r25
     ffa:	61 f0       	breq	.+24     	; 0x1014 <__fp_splitA+0x20>
     ffc:	9f 3f       	cpi	r25, 0xFF	; 255
     ffe:	79 f0       	breq	.+30     	; 0x101e <__fp_splitA+0x2a>
    1000:	87 95       	ror	r24
    1002:	08 95       	ret
    1004:	12 16       	cp	r1, r18
    1006:	13 06       	cpc	r1, r19
    1008:	14 06       	cpc	r1, r20
    100a:	55 1f       	adc	r21, r21
    100c:	f2 cf       	rjmp	.-28     	; 0xff2 <__fp_split3+0xe>
    100e:	46 95       	lsr	r20
    1010:	f1 df       	rcall	.-30     	; 0xff4 <__fp_splitA>
    1012:	08 c0       	rjmp	.+16     	; 0x1024 <__fp_splitA+0x30>
    1014:	16 16       	cp	r1, r22
    1016:	17 06       	cpc	r1, r23
    1018:	18 06       	cpc	r1, r24
    101a:	99 1f       	adc	r25, r25
    101c:	f1 cf       	rjmp	.-30     	; 0x1000 <__fp_splitA+0xc>
    101e:	86 95       	lsr	r24
    1020:	71 05       	cpc	r23, r1
    1022:	61 05       	cpc	r22, r1
    1024:	08 94       	sec
    1026:	08 95       	ret

00001028 <__fp_zero>:
    1028:	e8 94       	clt

0000102a <__fp_szero>:
    102a:	bb 27       	eor	r27, r27
    102c:	66 27       	eor	r22, r22
    102e:	77 27       	eor	r23, r23
    1030:	cb 01       	movw	r24, r22
    1032:	97 f9       	bld	r25, 7
    1034:	08 95       	ret

00001036 <__mulsf3>:
    1036:	0b d0       	rcall	.+22     	; 0x104e <__mulsf3x>
    1038:	78 c0       	rjmp	.+240    	; 0x112a <__fp_round>
    103a:	69 d0       	rcall	.+210    	; 0x110e <__fp_pscA>
    103c:	28 f0       	brcs	.+10     	; 0x1048 <__mulsf3+0x12>
    103e:	6e d0       	rcall	.+220    	; 0x111c <__fp_pscB>
    1040:	18 f0       	brcs	.+6      	; 0x1048 <__mulsf3+0x12>
    1042:	95 23       	and	r25, r21
    1044:	09 f0       	breq	.+2      	; 0x1048 <__mulsf3+0x12>
    1046:	5a c0       	rjmp	.+180    	; 0x10fc <__fp_inf>
    1048:	5f c0       	rjmp	.+190    	; 0x1108 <__fp_nan>
    104a:	11 24       	eor	r1, r1
    104c:	ee cf       	rjmp	.-36     	; 0x102a <__fp_szero>

0000104e <__mulsf3x>:
    104e:	ca df       	rcall	.-108    	; 0xfe4 <__fp_split3>
    1050:	a0 f3       	brcs	.-24     	; 0x103a <__mulsf3+0x4>

00001052 <__mulsf3_pse>:
    1052:	95 9f       	mul	r25, r21
    1054:	d1 f3       	breq	.-12     	; 0x104a <__mulsf3+0x14>
    1056:	95 0f       	add	r25, r21
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	55 1f       	adc	r21, r21
    105c:	62 9f       	mul	r22, r18
    105e:	f0 01       	movw	r30, r0
    1060:	72 9f       	mul	r23, r18
    1062:	bb 27       	eor	r27, r27
    1064:	f0 0d       	add	r31, r0
    1066:	b1 1d       	adc	r27, r1
    1068:	63 9f       	mul	r22, r19
    106a:	aa 27       	eor	r26, r26
    106c:	f0 0d       	add	r31, r0
    106e:	b1 1d       	adc	r27, r1
    1070:	aa 1f       	adc	r26, r26
    1072:	64 9f       	mul	r22, r20
    1074:	66 27       	eor	r22, r22
    1076:	b0 0d       	add	r27, r0
    1078:	a1 1d       	adc	r26, r1
    107a:	66 1f       	adc	r22, r22
    107c:	82 9f       	mul	r24, r18
    107e:	22 27       	eor	r18, r18
    1080:	b0 0d       	add	r27, r0
    1082:	a1 1d       	adc	r26, r1
    1084:	62 1f       	adc	r22, r18
    1086:	73 9f       	mul	r23, r19
    1088:	b0 0d       	add	r27, r0
    108a:	a1 1d       	adc	r26, r1
    108c:	62 1f       	adc	r22, r18
    108e:	83 9f       	mul	r24, r19
    1090:	a0 0d       	add	r26, r0
    1092:	61 1d       	adc	r22, r1
    1094:	22 1f       	adc	r18, r18
    1096:	74 9f       	mul	r23, r20
    1098:	33 27       	eor	r19, r19
    109a:	a0 0d       	add	r26, r0
    109c:	61 1d       	adc	r22, r1
    109e:	23 1f       	adc	r18, r19
    10a0:	84 9f       	mul	r24, r20
    10a2:	60 0d       	add	r22, r0
    10a4:	21 1d       	adc	r18, r1
    10a6:	82 2f       	mov	r24, r18
    10a8:	76 2f       	mov	r23, r22
    10aa:	6a 2f       	mov	r22, r26
    10ac:	11 24       	eor	r1, r1
    10ae:	9f 57       	subi	r25, 0x7F	; 127
    10b0:	50 40       	sbci	r21, 0x00	; 0
    10b2:	8a f0       	brmi	.+34     	; 0x10d6 <__mulsf3_pse+0x84>
    10b4:	e1 f0       	breq	.+56     	; 0x10ee <__mulsf3_pse+0x9c>
    10b6:	88 23       	and	r24, r24
    10b8:	4a f0       	brmi	.+18     	; 0x10cc <__mulsf3_pse+0x7a>
    10ba:	ee 0f       	add	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	bb 1f       	adc	r27, r27
    10c0:	66 1f       	adc	r22, r22
    10c2:	77 1f       	adc	r23, r23
    10c4:	88 1f       	adc	r24, r24
    10c6:	91 50       	subi	r25, 0x01	; 1
    10c8:	50 40       	sbci	r21, 0x00	; 0
    10ca:	a9 f7       	brne	.-22     	; 0x10b6 <__mulsf3_pse+0x64>
    10cc:	9e 3f       	cpi	r25, 0xFE	; 254
    10ce:	51 05       	cpc	r21, r1
    10d0:	70 f0       	brcs	.+28     	; 0x10ee <__mulsf3_pse+0x9c>
    10d2:	14 c0       	rjmp	.+40     	; 0x10fc <__fp_inf>
    10d4:	aa cf       	rjmp	.-172    	; 0x102a <__fp_szero>
    10d6:	5f 3f       	cpi	r21, 0xFF	; 255
    10d8:	ec f3       	brlt	.-6      	; 0x10d4 <__mulsf3_pse+0x82>
    10da:	98 3e       	cpi	r25, 0xE8	; 232
    10dc:	dc f3       	brlt	.-10     	; 0x10d4 <__mulsf3_pse+0x82>
    10de:	86 95       	lsr	r24
    10e0:	77 95       	ror	r23
    10e2:	67 95       	ror	r22
    10e4:	b7 95       	ror	r27
    10e6:	f7 95       	ror	r31
    10e8:	e7 95       	ror	r30
    10ea:	9f 5f       	subi	r25, 0xFF	; 255
    10ec:	c1 f7       	brne	.-16     	; 0x10de <__mulsf3_pse+0x8c>
    10ee:	fe 2b       	or	r31, r30
    10f0:	88 0f       	add	r24, r24
    10f2:	91 1d       	adc	r25, r1
    10f4:	96 95       	lsr	r25
    10f6:	87 95       	ror	r24
    10f8:	97 f9       	bld	r25, 7
    10fa:	08 95       	ret

000010fc <__fp_inf>:
    10fc:	97 f9       	bld	r25, 7
    10fe:	9f 67       	ori	r25, 0x7F	; 127
    1100:	80 e8       	ldi	r24, 0x80	; 128
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	08 95       	ret

00001108 <__fp_nan>:
    1108:	9f ef       	ldi	r25, 0xFF	; 255
    110a:	80 ec       	ldi	r24, 0xC0	; 192
    110c:	08 95       	ret

0000110e <__fp_pscA>:
    110e:	00 24       	eor	r0, r0
    1110:	0a 94       	dec	r0
    1112:	16 16       	cp	r1, r22
    1114:	17 06       	cpc	r1, r23
    1116:	18 06       	cpc	r1, r24
    1118:	09 06       	cpc	r0, r25
    111a:	08 95       	ret

0000111c <__fp_pscB>:
    111c:	00 24       	eor	r0, r0
    111e:	0a 94       	dec	r0
    1120:	12 16       	cp	r1, r18
    1122:	13 06       	cpc	r1, r19
    1124:	14 06       	cpc	r1, r20
    1126:	05 06       	cpc	r0, r21
    1128:	08 95       	ret

0000112a <__fp_round>:
    112a:	09 2e       	mov	r0, r25
    112c:	03 94       	inc	r0
    112e:	00 0c       	add	r0, r0
    1130:	11 f4       	brne	.+4      	; 0x1136 <__fp_round+0xc>
    1132:	88 23       	and	r24, r24
    1134:	52 f0       	brmi	.+20     	; 0x114a <__fp_round+0x20>
    1136:	bb 0f       	add	r27, r27
    1138:	40 f4       	brcc	.+16     	; 0x114a <__fp_round+0x20>
    113a:	bf 2b       	or	r27, r31
    113c:	11 f4       	brne	.+4      	; 0x1142 <__fp_round+0x18>
    113e:	60 ff       	sbrs	r22, 0
    1140:	04 c0       	rjmp	.+8      	; 0x114a <__fp_round+0x20>
    1142:	6f 5f       	subi	r22, 0xFF	; 255
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	8f 4f       	sbci	r24, 0xFF	; 255
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	08 95       	ret

0000114c <_exit>:
    114c:	f8 94       	cli

0000114e <__stop_program>:
    114e:	ff cf       	rjmp	.-2      	; 0x114e <__stop_program>
